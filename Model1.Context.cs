//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SampleApp
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MortgageDBEntities : DbContext
    {
        public MortgageDBEntities()
            : base("name=MortgageDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<SB_CM_Account> SB_CM_Account { get; set; }
        public virtual DbSet<SB_CM_TransmittalBatch> SB_CM_TransmittalBatch { get; set; }
        public virtual DbSet<SB_LTO_TransmittalBatch> SB_LTO_TransmittalBatch { get; set; }
        public virtual DbSet<SB_REM_CTC_TransmittalBatch> SB_REM_CTC_TransmittalBatch { get; set; }
        public virtual DbSet<SB_REM_TransmittalBatch> SB_REM_TransmittalBatch { get; set; }
        public virtual DbSet<SETUserAccessGroup> SETUserAccessGroups { get; set; }
        public virtual DbSet<SB_CM_Account_Logs> SB_CM_Account_Logs { get; set; }
        public virtual DbSet<SB_CM_AccountBatch> SB_CM_AccountBatch { get; set; }
        public virtual DbSet<SB_CM_BillingBatch> SB_CM_BillingBatch { get; set; }
        public virtual DbSet<SB_CM_BillingEntry> SB_CM_BillingEntry { get; set; }
        public virtual DbSet<SB_CM_BudgetRequestBatch> SB_CM_BudgetRequestBatch { get; set; }
        public virtual DbSet<SB_CM_BudgetRequestEntry> SB_CM_BudgetRequestEntry { get; set; }
        public virtual DbSet<SB_CM_Comments> SB_CM_Comments { get; set; }
        public virtual DbSet<SB_CM_OtherExpenses> SB_CM_OtherExpenses { get; set; }
        public virtual DbSet<SB_CM_ReleasedBatch> SB_CM_ReleasedBatch { get; set; }
        public virtual DbSet<SB_CM_ReleasedEntry> SB_CM_ReleasedEntry { get; set; }
        public virtual DbSet<SB_CM_ReturnBatch> SB_CM_ReturnBatch { get; set; }
        public virtual DbSet<SB_CM_ReturnEntry> SB_CM_ReturnEntry { get; set; }
        public virtual DbSet<SB_CM_TransmittalEntry> SB_CM_TransmittalEntry { get; set; }
        public virtual DbSet<SB_Comments> SB_Comments { get; set; }
        public virtual DbSet<SB_LTO_Account> SB_LTO_Account { get; set; }
        public virtual DbSet<SB_LTO_AccountBatch> SB_LTO_AccountBatch { get; set; }
        public virtual DbSet<SB_LTO_BillingBatch> SB_LTO_BillingBatch { get; set; }
        public virtual DbSet<SB_LTO_BillingEntry> SB_LTO_BillingEntry { get; set; }
        public virtual DbSet<SB_LTO_ForConfirmationBatch> SB_LTO_ForConfirmationBatch { get; set; }
        public virtual DbSet<SB_LTO_ForConfirmationEntry> SB_LTO_ForConfirmationEntry { get; set; }
        public virtual DbSet<SB_LTO_ForConfirmationReplyBatch> SB_LTO_ForConfirmationReplyBatch { get; set; }
        public virtual DbSet<SB_LTO_ForConfirmationReplyEntry> SB_LTO_ForConfirmationReplyEntry { get; set; }
        public virtual DbSet<SB_LTO_ForEncumbranceBatch> SB_LTO_ForEncumbranceBatch { get; set; }
        public virtual DbSet<SB_LTO_ForEncumbranceEntry> SB_LTO_ForEncumbranceEntry { get; set; }
        public virtual DbSet<SB_LTO_ForEncumbranceVehicleInfoEntry> SB_LTO_ForEncumbranceVehicleInfoEntry { get; set; }
        public virtual DbSet<SB_LTO_OtherExpenses> SB_LTO_OtherExpenses { get; set; }
        public virtual DbSet<SB_LTO_ReleasedBatch> SB_LTO_ReleasedBatch { get; set; }
        public virtual DbSet<SB_LTO_ReleasedEntry> SB_LTO_ReleasedEntry { get; set; }
        public virtual DbSet<SB_LTO_ReturnBatch> SB_LTO_ReturnBatch { get; set; }
        public virtual DbSet<SB_LTO_ReturnEntry> SB_LTO_ReturnEntry { get; set; }
        public virtual DbSet<SB_LTO_TransmittalEntry> SB_LTO_TransmittalEntry { get; set; }
        public virtual DbSet<SB_REM_Account> SB_REM_Account { get; set; }
        public virtual DbSet<SB_REM_AccountBatch> SB_REM_AccountBatch { get; set; }
        public virtual DbSet<SB_REM_AccountListOfDocument> SB_REM_AccountListOfDocument { get; set; }
        public virtual DbSet<SB_REM_BillingBatch> SB_REM_BillingBatch { get; set; }
        public virtual DbSet<SB_REM_BillingEntry> SB_REM_BillingEntry { get; set; }
        public virtual DbSet<SB_REM_BudgetRequestBatch> SB_REM_BudgetRequestBatch { get; set; }
        public virtual DbSet<SB_REM_BudgetRequestEntry> SB_REM_BudgetRequestEntry { get; set; }
        public virtual DbSet<SB_REM_CTC_BillingBatch> SB_REM_CTC_BillingBatch { get; set; }
        public virtual DbSet<SB_REM_CTC_BillingEntry> SB_REM_CTC_BillingEntry { get; set; }
        public virtual DbSet<SB_REM_CTC_BudgetRequestBatch> SB_REM_CTC_BudgetRequestBatch { get; set; }
        public virtual DbSet<SB_REM_CTC_BudgetRequestEntry> SB_REM_CTC_BudgetRequestEntry { get; set; }
        public virtual DbSet<SB_REM_CTC_OtherExpenses> SB_REM_CTC_OtherExpenses { get; set; }
        public virtual DbSet<SB_REM_CTC_ReleasedBatch> SB_REM_CTC_ReleasedBatch { get; set; }
        public virtual DbSet<SB_REM_CTC_ReleasedEntry> SB_REM_CTC_ReleasedEntry { get; set; }
        public virtual DbSet<SB_REM_CTC_TransmittalEntry> SB_REM_CTC_TransmittalEntry { get; set; }
        public virtual DbSet<SB_REM_OtherExpenses> SB_REM_OtherExpenses { get; set; }
        public virtual DbSet<SB_REM_ReleasedBatch> SB_REM_ReleasedBatch { get; set; }
        public virtual DbSet<SB_REM_ReleasedEntry> SB_REM_ReleasedEntry { get; set; }
        public virtual DbSet<SB_REM_ReturnBatch> SB_REM_ReturnBatch { get; set; }
        public virtual DbSet<SB_REM_ReturnEntry> SB_REM_ReturnEntry { get; set; }
        public virtual DbSet<SB_REM_TransmittalEntry> SB_REM_TransmittalEntry { get; set; }
        public virtual DbSet<SETAmount> SETAmounts { get; set; }
        public virtual DbSet<SETBank> SETBanks { get; set; }
        public virtual DbSet<SETBankLad> SETBankLads { get; set; }
        public virtual DbSet<SETBankLadModule> SETBankLadModules { get; set; }
        public virtual DbSet<SETBatchStatu> SETBatchStatus { get; set; }
        public virtual DbSet<SETBudgetRequestStatu> SETBudgetRequestStatus { get; set; }
        public virtual DbSet<SETCMStatu> SETCMStatus { get; set; }
        public virtual DbSet<SETCompany> SETCompanies { get; set; }
        public virtual DbSet<SETEmployee> SETEmployees { get; set; }
        public virtual DbSet<SETEmployeeGroup> SETEmployeeGroups { get; set; }
        public virtual DbSet<SETLTOAddress> SETLTOAddresses { get; set; }
        public virtual DbSet<SETLTOAgency> SETLTOAgencies { get; set; }
        public virtual DbSet<SETLTOAmount> SETLTOAmounts { get; set; }
        public virtual DbSet<SETLTOFieldOffice> SETLTOFieldOffices { get; set; }
        public virtual DbSet<SETLTOStatu> SETLTOStatus { get; set; }
        public virtual DbSet<SETModule> SETModules { get; set; }
        public virtual DbSet<SETModuleGroup> SETModuleGroups { get; set; }
        public virtual DbSet<SETProcessStatu> SETProcessStatus { get; set; }
        public virtual DbSet<SETRegistryOfDeed> SETRegistryOfDeeds { get; set; }
        public virtual DbSet<SETREMCTCStatu> SETREMCTCStatus { get; set; }
        public virtual DbSet<SETREMListOfDocument> SETREMListOfDocuments { get; set; }
        public virtual DbSet<SETREMStatu> SETREMStatus { get; set; }
        public virtual DbSet<SETReportLink> SETReportLinks { get; set; }
        public virtual DbSet<SETUserAccess> SETUserAccesses { get; set; }
        public virtual DbSet<SB_CM_BillingCMAnnotation_Report> SB_CM_BillingCMAnnotation_Report { get; set; }
        public virtual DbSet<SB_CM_BillingMain_Report> SB_CM_BillingMain_Report { get; set; }
        public virtual DbSet<SB_CM_BillingStatementOfAccount_Report> SB_CM_BillingStatementOfAccount_Report { get; set; }
        public virtual DbSet<SB_CM_BillingSub_Report> SB_CM_BillingSub_Report { get; set; }
        public virtual DbSet<SB_CM_BudgetRequestBatch_Report> SB_CM_BudgetRequestBatch_Report { get; set; }
        public virtual DbSet<SB_CM_BudgetRequestEntry_Report> SB_CM_BudgetRequestEntry_Report { get; set; }
        public virtual DbSet<SB_CM_MonthlyQuantityReport> SB_CM_MonthlyQuantityReport { get; set; }
        public virtual DbSet<SB_CM_MonthlyStatusReport> SB_CM_MonthlyStatusReport { get; set; }
        public virtual DbSet<SB_CM_ReleasedMain_Report> SB_CM_ReleasedMain_Report { get; set; }
        public virtual DbSet<SB_CM_TransmittalBatch_Report> SB_CM_TransmittalBatch_Report { get; set; }
        public virtual DbSet<SB_LTO_BillingMain_Report> SB_LTO_BillingMain_Report { get; set; }
        public virtual DbSet<SB_LTO_BillingStatementOfAccount_Report> SB_LTO_BillingStatementOfAccount_Report { get; set; }
        public virtual DbSet<SB_LTO_BillingSub_Report> SB_LTO_BillingSub_Report { get; set; }
        public virtual DbSet<SB_LTO_ForConfirmationBatch_Report> SB_LTO_ForConfirmationBatch_Report { get; set; }
        public virtual DbSet<SB_LTO_ForConfirmationReplyBatch_Report> SB_LTO_ForConfirmationReplyBatch_Report { get; set; }
        public virtual DbSet<SB_LTO_ForEncumbranceBatch_Report> SB_LTO_ForEncumbranceBatch_Report { get; set; }
        public virtual DbSet<SB_LTO_ForEncumbranceEntry_Report> SB_LTO_ForEncumbranceEntry_Report { get; set; }
        public virtual DbSet<SB_LTO_ForEncumbranceLTO_Report> SB_LTO_ForEncumbranceLTO_Report { get; set; }
        public virtual DbSet<SB_LTO_MonthlyQuantityReport> SB_LTO_MonthlyQuantityReport { get; set; }
        public virtual DbSet<SB_LTO_MontlyStatusReport> SB_LTO_MontlyStatusReport { get; set; }
        public virtual DbSet<SB_LTO_TransmittalBatch_Report> SB_LTO_TransmittalBatch_Report { get; set; }
        public virtual DbSet<SB_REM_BillingCMAnnotation_Report> SB_REM_BillingCMAnnotation_Report { get; set; }
        public virtual DbSet<SB_REM_BillingMain_Report> SB_REM_BillingMain_Report { get; set; }
        public virtual DbSet<SB_REM_BillingStatementOfAccount_Report> SB_REM_BillingStatementOfAccount_Report { get; set; }
        public virtual DbSet<SB_REM_BillingSub_Report> SB_REM_BillingSub_Report { get; set; }
        public virtual DbSet<SB_REM_BudgetRequestBatch_Report> SB_REM_BudgetRequestBatch_Report { get; set; }
        public virtual DbSet<SB_REM_BudgetRequestEntry_Report> SB_REM_BudgetRequestEntry_Report { get; set; }
        public virtual DbSet<SB_REM_CTC_BillingMain_Report> SB_REM_CTC_BillingMain_Report { get; set; }
        public virtual DbSet<SB_REM_CTC_BillingStatementOfAccount_Report> SB_REM_CTC_BillingStatementOfAccount_Report { get; set; }
        public virtual DbSet<SB_REM_CTC_BillingSub_Report> SB_REM_CTC_BillingSub_Report { get; set; }
        public virtual DbSet<SB_REM_CTC_BudgetRequestBatch_Report> SB_REM_CTC_BudgetRequestBatch_Report { get; set; }
        public virtual DbSet<SB_REM_CTC_BudgetRequestEntry_Report> SB_REM_CTC_BudgetRequestEntry_Report { get; set; }
        public virtual DbSet<SB_REM_CTC_TransmittalBatch_Report> SB_REM_CTC_TransmittalBatch_Report { get; set; }
        public virtual DbSet<SB_REM_MonthlyQuantityReport> SB_REM_MonthlyQuantityReport { get; set; }
        public virtual DbSet<SB_REM_MonthlyStatusReport> SB_REM_MonthlyStatusReport { get; set; }
        public virtual DbSet<SB_REM_ReleasedMain_Report> SB_REM_ReleasedMain_Report { get; set; }
        public virtual DbSet<SB_REM_TransmittalBatch_Report> SB_REM_TransmittalBatch_Report { get; set; }
    
        public virtual int Amount_SaveUpdate(Nullable<int> id, Nullable<int> moduleID, Nullable<decimal> amount)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("ModuleID", moduleID) :
                new ObjectParameter("ModuleID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Amount_SaveUpdate", idParameter, moduleIDParameter, amountParameter);
        }
    
        public virtual ObjectResult<Amounts_Load_Result> Amounts_Load()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Amounts_Load_Result>("Amounts_Load");
        }
    
        public virtual ObjectResult<CM_LoadComments_Result> CM_LoadComments(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CM_LoadComments_Result>("CM_LoadComments", idParameter);
        }
    
        public virtual ObjectResult<CM_SB_Accounts_Load_Result> CM_SB_Accounts_Load(Nullable<int> id, string bank, string registryOfDeeds, string status, Nullable<bool> isProcessing, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var bankParameter = bank != null ?
                new ObjectParameter("bank", bank) :
                new ObjectParameter("bank", typeof(string));
    
            var registryOfDeedsParameter = registryOfDeeds != null ?
                new ObjectParameter("registryOfDeeds", registryOfDeeds) :
                new ObjectParameter("registryOfDeeds", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var isProcessingParameter = isProcessing.HasValue ?
                new ObjectParameter("isProcessing", isProcessing) :
                new ObjectParameter("isProcessing", typeof(bool));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CM_SB_Accounts_Load_Result>("CM_SB_Accounts_Load", idParameter, bankParameter, registryOfDeedsParameter, statusParameter, isProcessingParameter, datefromParameter, datetoParameter, keywordParameter, rownoParameter);
        }
    
        public virtual ObjectResult<CM_SB_Accounts_Load_ForReleaseSelection_Result> CM_SB_Accounts_Load_ForReleaseSelection(Nullable<int> id, string bank, string registryOfDeeds, string status, Nullable<bool> isProcessing, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var bankParameter = bank != null ?
                new ObjectParameter("bank", bank) :
                new ObjectParameter("bank", typeof(string));
    
            var registryOfDeedsParameter = registryOfDeeds != null ?
                new ObjectParameter("registryOfDeeds", registryOfDeeds) :
                new ObjectParameter("registryOfDeeds", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var isProcessingParameter = isProcessing.HasValue ?
                new ObjectParameter("isProcessing", isProcessing) :
                new ObjectParameter("isProcessing", typeof(bool));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CM_SB_Accounts_Load_ForReleaseSelection_Result>("CM_SB_Accounts_Load_ForReleaseSelection", idParameter, bankParameter, registryOfDeedsParameter, statusParameter, isProcessingParameter, datefromParameter, datetoParameter, keywordParameter, rownoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CM_SB_AccountsBatch_Load(Nullable<int> accountid)
        {
            var accountidParameter = accountid.HasValue ?
                new ObjectParameter("accountid", accountid) :
                new ObjectParameter("accountid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CM_SB_AccountsBatch_Load", accountidParameter);
        }
    
        public virtual ObjectResult<CM_SB_Batch_Load_Result> CM_SB_Batch_Load(Nullable<int> id, string bankId, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var bankIdParameter = bankId != null ?
                new ObjectParameter("bankId", bankId) :
                new ObjectParameter("bankId", typeof(string));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CM_SB_Batch_Load_Result>("CM_SB_Batch_Load", idParameter, bankIdParameter, datefromParameter, datetoParameter, keywordParameter, rownoParameter);
        }
    
        public virtual int CM_SB_Batch_SaveUpdate(Nullable<bool> booledit, Nullable<int> id, string batchID, Nullable<System.DateTime> dateReceived, Nullable<int> bankId, Nullable<int> staffInChargeID, Nullable<int> encodedById, string xmldatallist)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var batchIDParameter = batchID != null ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(string));
    
            var dateReceivedParameter = dateReceived.HasValue ?
                new ObjectParameter("DateReceived", dateReceived) :
                new ObjectParameter("DateReceived", typeof(System.DateTime));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var staffInChargeIDParameter = staffInChargeID.HasValue ?
                new ObjectParameter("StaffInChargeID", staffInChargeID) :
                new ObjectParameter("StaffInChargeID", typeof(int));
    
            var encodedByIdParameter = encodedById.HasValue ?
                new ObjectParameter("EncodedById", encodedById) :
                new ObjectParameter("EncodedById", typeof(int));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CM_SB_Batch_SaveUpdate", booleditParameter, idParameter, batchIDParameter, dateReceivedParameter, bankIdParameter, staffInChargeIDParameter, encodedByIdParameter, xmldatallistParameter);
        }
    
        public virtual ObjectResult<CM_SB_Billing_Load_Result> CM_SB_Billing_Load(Nullable<int> id, string bankcode, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<int> status, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var bankcodeParameter = bankcode != null ?
                new ObjectParameter("bankcode", bankcode) :
                new ObjectParameter("bankcode", typeof(string));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CM_SB_Billing_Load_Result>("CM_SB_Billing_Load", idParameter, bankcodeParameter, datefromParameter, datetoParameter, statusParameter, keywordParameter, rownoParameter);
        }
    
        public virtual int CM_SB_Billing_SaveUpdate(Nullable<bool> booledit, Nullable<int> id, Nullable<int> transmittalid, Nullable<int> bankid, Nullable<System.DateTime> billingdate, string contactpersonid, Nullable<int> preparedbyid, Nullable<int> checkedbyid, Nullable<int> approvedbyid, Nullable<int> encodedbyid, Nullable<bool> isprocess, Nullable<int> approvalstatus, Nullable<int> batchstatus, Nullable<int> billingnumber, string batchno, string xmldatallist)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var transmittalidParameter = transmittalid.HasValue ?
                new ObjectParameter("transmittalid", transmittalid) :
                new ObjectParameter("transmittalid", typeof(int));
    
            var bankidParameter = bankid.HasValue ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(int));
    
            var billingdateParameter = billingdate.HasValue ?
                new ObjectParameter("billingdate", billingdate) :
                new ObjectParameter("billingdate", typeof(System.DateTime));
    
            var contactpersonidParameter = contactpersonid != null ?
                new ObjectParameter("contactpersonid", contactpersonid) :
                new ObjectParameter("contactpersonid", typeof(string));
    
            var preparedbyidParameter = preparedbyid.HasValue ?
                new ObjectParameter("preparedbyid", preparedbyid) :
                new ObjectParameter("preparedbyid", typeof(int));
    
            var checkedbyidParameter = checkedbyid.HasValue ?
                new ObjectParameter("checkedbyid", checkedbyid) :
                new ObjectParameter("checkedbyid", typeof(int));
    
            var approvedbyidParameter = approvedbyid.HasValue ?
                new ObjectParameter("approvedbyid", approvedbyid) :
                new ObjectParameter("approvedbyid", typeof(int));
    
            var encodedbyidParameter = encodedbyid.HasValue ?
                new ObjectParameter("encodedbyid", encodedbyid) :
                new ObjectParameter("encodedbyid", typeof(int));
    
            var isprocessParameter = isprocess.HasValue ?
                new ObjectParameter("isprocess", isprocess) :
                new ObjectParameter("isprocess", typeof(bool));
    
            var approvalstatusParameter = approvalstatus.HasValue ?
                new ObjectParameter("approvalstatus", approvalstatus) :
                new ObjectParameter("approvalstatus", typeof(int));
    
            var batchstatusParameter = batchstatus.HasValue ?
                new ObjectParameter("batchstatus", batchstatus) :
                new ObjectParameter("batchstatus", typeof(int));
    
            var billingnumberParameter = billingnumber.HasValue ?
                new ObjectParameter("billingnumber", billingnumber) :
                new ObjectParameter("billingnumber", typeof(int));
    
            var batchnoParameter = batchno != null ?
                new ObjectParameter("batchno", batchno) :
                new ObjectParameter("batchno", typeof(string));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CM_SB_Billing_SaveUpdate", booleditParameter, idParameter, transmittalidParameter, bankidParameter, billingdateParameter, contactpersonidParameter, preparedbyidParameter, checkedbyidParameter, approvedbyidParameter, encodedbyidParameter, isprocessParameter, approvalstatusParameter, batchstatusParameter, billingnumberParameter, batchnoParameter, xmldatallistParameter);
        }
    
        public virtual ObjectResult<CM_SB_BudgetRequest_Load_Result> CM_SB_BudgetRequest_Load(Nullable<int> id, string registryofdeeds, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<int> status, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var registryofdeedsParameter = registryofdeeds != null ?
                new ObjectParameter("registryofdeeds", registryofdeeds) :
                new ObjectParameter("registryofdeeds", typeof(string));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CM_SB_BudgetRequest_Load_Result>("CM_SB_BudgetRequest_Load", idParameter, registryofdeedsParameter, datefromParameter, datetoParameter, statusParameter, keywordParameter, rownoParameter);
        }
    
        public virtual int CM_SB_BudgetRequest_SaveUpdate(Nullable<bool> booledit, Nullable<int> id, string budgetrequestid, Nullable<int> registryofdeedsid, Nullable<System.DateTime> targetdate, Nullable<System.DateTime> daterecieved, Nullable<int> staffinchargeid, Nullable<int> checkedbyid, Nullable<int> approvedbyid, Nullable<decimal> requestedbudget, Nullable<int> encodedById, Nullable<int> approvalstatus, Nullable<int> batchstatus, Nullable<bool> isprocess, string xmldatallist)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var budgetrequestidParameter = budgetrequestid != null ?
                new ObjectParameter("budgetrequestid", budgetrequestid) :
                new ObjectParameter("budgetrequestid", typeof(string));
    
            var registryofdeedsidParameter = registryofdeedsid.HasValue ?
                new ObjectParameter("registryofdeedsid", registryofdeedsid) :
                new ObjectParameter("registryofdeedsid", typeof(int));
    
            var targetdateParameter = targetdate.HasValue ?
                new ObjectParameter("targetdate", targetdate) :
                new ObjectParameter("targetdate", typeof(System.DateTime));
    
            var daterecievedParameter = daterecieved.HasValue ?
                new ObjectParameter("daterecieved", daterecieved) :
                new ObjectParameter("daterecieved", typeof(System.DateTime));
    
            var staffinchargeidParameter = staffinchargeid.HasValue ?
                new ObjectParameter("staffinchargeid", staffinchargeid) :
                new ObjectParameter("staffinchargeid", typeof(int));
    
            var checkedbyidParameter = checkedbyid.HasValue ?
                new ObjectParameter("checkedbyid", checkedbyid) :
                new ObjectParameter("checkedbyid", typeof(int));
    
            var approvedbyidParameter = approvedbyid.HasValue ?
                new ObjectParameter("approvedbyid", approvedbyid) :
                new ObjectParameter("approvedbyid", typeof(int));
    
            var requestedbudgetParameter = requestedbudget.HasValue ?
                new ObjectParameter("requestedbudget", requestedbudget) :
                new ObjectParameter("requestedbudget", typeof(decimal));
    
            var encodedByIdParameter = encodedById.HasValue ?
                new ObjectParameter("EncodedById", encodedById) :
                new ObjectParameter("EncodedById", typeof(int));
    
            var approvalstatusParameter = approvalstatus.HasValue ?
                new ObjectParameter("approvalstatus", approvalstatus) :
                new ObjectParameter("approvalstatus", typeof(int));
    
            var batchstatusParameter = batchstatus.HasValue ?
                new ObjectParameter("batchstatus", batchstatus) :
                new ObjectParameter("batchstatus", typeof(int));
    
            var isprocessParameter = isprocess.HasValue ?
                new ObjectParameter("isprocess", isprocess) :
                new ObjectParameter("isprocess", typeof(bool));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CM_SB_BudgetRequest_SaveUpdate", booleditParameter, idParameter, budgetrequestidParameter, registryofdeedsidParameter, targetdateParameter, daterecievedParameter, staffinchargeidParameter, checkedbyidParameter, approvedbyidParameter, requestedbudgetParameter, encodedByIdParameter, approvalstatusParameter, batchstatusParameter, isprocessParameter, xmldatallistParameter);
        }
    
        public virtual ObjectResult<CM_SB_DefaultValue_Load_Result> CM_SB_DefaultValue_Load(string description)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CM_SB_DefaultValue_Load_Result>("CM_SB_DefaultValue_Load", descriptionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CM_SB_Get_Row(string transactionname)
        {
            var transactionnameParameter = transactionname != null ?
                new ObjectParameter("transactionname", transactionname) :
                new ObjectParameter("transactionname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CM_SB_Get_Row", transactionnameParameter);
        }
    
        public virtual int CM_SB_LoadSelection(string status, Nullable<int> bankid, Nullable<int> registryofdeedsid, string keyword, Nullable<int> rowno)
        {
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var bankidParameter = bankid.HasValue ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(int));
    
            var registryofdeedsidParameter = registryofdeedsid.HasValue ?
                new ObjectParameter("registryofdeedsid", registryofdeedsid) :
                new ObjectParameter("registryofdeedsid", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CM_SB_LoadSelection", statusParameter, bankidParameter, registryofdeedsidParameter, keywordParameter, rownoParameter);
        }
    
        public virtual int CM_SB_OtherExpenses_Delete(string batchid)
        {
            var batchidParameter = batchid != null ?
                new ObjectParameter("batchid", batchid) :
                new ObjectParameter("batchid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CM_SB_OtherExpenses_Delete", batchidParameter);
        }
    
        public virtual ObjectResult<CM_SB_OtherExpenses_Load_Result> CM_SB_OtherExpenses_Load(string batchid)
        {
            var batchidParameter = batchid != null ?
                new ObjectParameter("batchid", batchid) :
                new ObjectParameter("batchid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CM_SB_OtherExpenses_Load_Result>("CM_SB_OtherExpenses_Load", batchidParameter);
        }
    
        public virtual int CM_SB_OtherExpenses_SaveUpdate(Nullable<int> id, string xmldatallist)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CM_SB_OtherExpenses_SaveUpdate", idParameter, xmldatallistParameter);
        }
    
        public virtual ObjectResult<CM_SB_Released_Load_Result> CM_SB_Released_Load(Nullable<int> id, string registryofdeeds, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<int> status, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var registryofdeedsParameter = registryofdeeds != null ?
                new ObjectParameter("registryofdeeds", registryofdeeds) :
                new ObjectParameter("registryofdeeds", typeof(string));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CM_SB_Released_Load_Result>("CM_SB_Released_Load", idParameter, registryofdeedsParameter, datefromParameter, datetoParameter, statusParameter, keywordParameter, rownoParameter);
        }
    
        public virtual int CM_SB_Released_SaveUpdate(Nullable<bool> booledit, Nullable<int> id, string releasedid, Nullable<int> registryofdeedsid, Nullable<int> encodedById, Nullable<bool> isprocess, Nullable<int> approvalstatus, Nullable<int> batchstatus, string xmldatallist)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var releasedidParameter = releasedid != null ?
                new ObjectParameter("releasedid", releasedid) :
                new ObjectParameter("releasedid", typeof(string));
    
            var registryofdeedsidParameter = registryofdeedsid.HasValue ?
                new ObjectParameter("registryofdeedsid", registryofdeedsid) :
                new ObjectParameter("registryofdeedsid", typeof(int));
    
            var encodedByIdParameter = encodedById.HasValue ?
                new ObjectParameter("EncodedById", encodedById) :
                new ObjectParameter("EncodedById", typeof(int));
    
            var isprocessParameter = isprocess.HasValue ?
                new ObjectParameter("isprocess", isprocess) :
                new ObjectParameter("isprocess", typeof(bool));
    
            var approvalstatusParameter = approvalstatus.HasValue ?
                new ObjectParameter("approvalstatus", approvalstatus) :
                new ObjectParameter("approvalstatus", typeof(int));
    
            var batchstatusParameter = batchstatus.HasValue ?
                new ObjectParameter("batchstatus", batchstatus) :
                new ObjectParameter("batchstatus", typeof(int));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CM_SB_Released_SaveUpdate", booleditParameter, idParameter, releasedidParameter, registryofdeedsidParameter, encodedByIdParameter, isprocessParameter, approvalstatusParameter, batchstatusParameter, xmldatallistParameter);
        }
    
        public virtual ObjectResult<CM_SB_Report_Result> CM_SB_Report(string reportdescription, Nullable<int> id)
        {
            var reportdescriptionParameter = reportdescription != null ?
                new ObjectParameter("reportdescription", reportdescription) :
                new ObjectParameter("reportdescription", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CM_SB_Report_Result>("CM_SB_Report", reportdescriptionParameter, idParameter);
        }
    
        public virtual ObjectResult<CM_SB_Return_Load_Result> CM_SB_Return_Load(Nullable<int> id, string bankid, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<int> status, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var bankidParameter = bankid != null ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(string));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CM_SB_Return_Load_Result>("CM_SB_Return_Load", idParameter, bankidParameter, datefromParameter, datetoParameter, statusParameter, keywordParameter, rownoParameter);
        }
    
        public virtual ObjectResult<CM_SB_Return_ReportLoad_Result> CM_SB_Return_ReportLoad(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CM_SB_Return_ReportLoad_Result>("CM_SB_Return_ReportLoad", idParameter);
        }
    
        public virtual int CM_SB_Return_SaveUpdate(Nullable<bool> booledit, Nullable<int> id, string returnbatch, Nullable<int> bankid, string recievedbyname, Nullable<int> encodedById, Nullable<bool> isprocess, Nullable<int> approvalstatus, string xmldatallist)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var returnbatchParameter = returnbatch != null ?
                new ObjectParameter("returnbatch", returnbatch) :
                new ObjectParameter("returnbatch", typeof(string));
    
            var bankidParameter = bankid.HasValue ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(int));
    
            var recievedbynameParameter = recievedbyname != null ?
                new ObjectParameter("recievedbyname", recievedbyname) :
                new ObjectParameter("recievedbyname", typeof(string));
    
            var encodedByIdParameter = encodedById.HasValue ?
                new ObjectParameter("EncodedById", encodedById) :
                new ObjectParameter("EncodedById", typeof(int));
    
            var isprocessParameter = isprocess.HasValue ?
                new ObjectParameter("isprocess", isprocess) :
                new ObjectParameter("isprocess", typeof(bool));
    
            var approvalstatusParameter = approvalstatus.HasValue ?
                new ObjectParameter("approvalstatus", approvalstatus) :
                new ObjectParameter("approvalstatus", typeof(int));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CM_SB_Return_SaveUpdate", booleditParameter, idParameter, returnbatchParameter, bankidParameter, recievedbynameParameter, encodedByIdParameter, isprocessParameter, approvalstatusParameter, xmldatallistParameter);
        }
    
        public virtual ObjectResult<CM_SB_Selection_Transmittal_Load_Result> CM_SB_Selection_Transmittal_Load(Nullable<int> bankid)
        {
            var bankidParameter = bankid.HasValue ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CM_SB_Selection_Transmittal_Load_Result>("CM_SB_Selection_Transmittal_Load", bankidParameter);
        }
    
        public virtual ObjectResult<CM_SB_Transmittal_Load_Result> CM_SB_Transmittal_Load(Nullable<int> id, string bankid, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<int> status, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var bankidParameter = bankid != null ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(string));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CM_SB_Transmittal_Load_Result>("CM_SB_Transmittal_Load", idParameter, bankidParameter, datefromParameter, datetoParameter, statusParameter, keywordParameter, rownoParameter);
        }
    
        public virtual int CM_SB_Transmittal_SaveUpdate(Nullable<bool> booledit, Nullable<int> id, string transmittalbatch, Nullable<int> bankid, string recievedbyname, Nullable<int> encodedById, Nullable<bool> isprocess, Nullable<int> approvalstatus, Nullable<int> batchstatus, string xmldatallist)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var transmittalbatchParameter = transmittalbatch != null ?
                new ObjectParameter("transmittalbatch", transmittalbatch) :
                new ObjectParameter("transmittalbatch", typeof(string));
    
            var bankidParameter = bankid.HasValue ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(int));
    
            var recievedbynameParameter = recievedbyname != null ?
                new ObjectParameter("recievedbyname", recievedbyname) :
                new ObjectParameter("recievedbyname", typeof(string));
    
            var encodedByIdParameter = encodedById.HasValue ?
                new ObjectParameter("EncodedById", encodedById) :
                new ObjectParameter("EncodedById", typeof(int));
    
            var isprocessParameter = isprocess.HasValue ?
                new ObjectParameter("isprocess", isprocess) :
                new ObjectParameter("isprocess", typeof(bool));
    
            var approvalstatusParameter = approvalstatus.HasValue ?
                new ObjectParameter("approvalstatus", approvalstatus) :
                new ObjectParameter("approvalstatus", typeof(int));
    
            var batchstatusParameter = batchstatus.HasValue ?
                new ObjectParameter("batchstatus", batchstatus) :
                new ObjectParameter("batchstatus", typeof(int));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CM_SB_Transmittal_SaveUpdate", booleditParameter, idParameter, transmittalbatchParameter, bankidParameter, recievedbynameParameter, encodedByIdParameter, isprocessParameter, approvalstatusParameter, batchstatusParameter, xmldatallistParameter);
        }
    
        public virtual int CM_SB_UpdateAccount(Nullable<int> id, string accountName, string engineNo, string rDORNo, Nullable<System.DateTime> dateOfEntry, string epebNo, Nullable<decimal> loadAmount, Nullable<decimal> requestedRDFee, Nullable<decimal> rDFee, Nullable<decimal> serviceFee, Nullable<decimal> gratuityFee, Nullable<int> registyOfDeedsId, Nullable<int> status)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var engineNoParameter = engineNo != null ?
                new ObjectParameter("EngineNo", engineNo) :
                new ObjectParameter("EngineNo", typeof(string));
    
            var rDORNoParameter = rDORNo != null ?
                new ObjectParameter("RDORNo", rDORNo) :
                new ObjectParameter("RDORNo", typeof(string));
    
            var dateOfEntryParameter = dateOfEntry.HasValue ?
                new ObjectParameter("DateOfEntry", dateOfEntry) :
                new ObjectParameter("DateOfEntry", typeof(System.DateTime));
    
            var epebNoParameter = epebNo != null ?
                new ObjectParameter("EpebNo", epebNo) :
                new ObjectParameter("EpebNo", typeof(string));
    
            var loadAmountParameter = loadAmount.HasValue ?
                new ObjectParameter("LoadAmount", loadAmount) :
                new ObjectParameter("LoadAmount", typeof(decimal));
    
            var requestedRDFeeParameter = requestedRDFee.HasValue ?
                new ObjectParameter("RequestedRDFee", requestedRDFee) :
                new ObjectParameter("RequestedRDFee", typeof(decimal));
    
            var rDFeeParameter = rDFee.HasValue ?
                new ObjectParameter("RDFee", rDFee) :
                new ObjectParameter("RDFee", typeof(decimal));
    
            var serviceFeeParameter = serviceFee.HasValue ?
                new ObjectParameter("ServiceFee", serviceFee) :
                new ObjectParameter("ServiceFee", typeof(decimal));
    
            var gratuityFeeParameter = gratuityFee.HasValue ?
                new ObjectParameter("GratuityFee", gratuityFee) :
                new ObjectParameter("GratuityFee", typeof(decimal));
    
            var registyOfDeedsIdParameter = registyOfDeedsId.HasValue ?
                new ObjectParameter("RegistyOfDeedsId", registyOfDeedsId) :
                new ObjectParameter("RegistyOfDeedsId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CM_SB_UpdateAccount", idParameter, accountNameParameter, engineNoParameter, rDORNoParameter, dateOfEntryParameter, epebNoParameter, loadAmountParameter, requestedRDFeeParameter, rDFeeParameter, serviceFeeParameter, gratuityFeeParameter, registyOfDeedsIdParameter, statusParameter);
        }
    
        public virtual int CM_SB_UpdateAccountStatus(string processid, Nullable<int> id, Nullable<int> approvalstatus, Nullable<int> accountbatchid, string xmldatallist)
        {
            var processidParameter = processid != null ?
                new ObjectParameter("processid", processid) :
                new ObjectParameter("processid", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var approvalstatusParameter = approvalstatus.HasValue ?
                new ObjectParameter("approvalstatus", approvalstatus) :
                new ObjectParameter("approvalstatus", typeof(int));
    
            var accountbatchidParameter = accountbatchid.HasValue ?
                new ObjectParameter("accountbatchid", accountbatchid) :
                new ObjectParameter("accountbatchid", typeof(int));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CM_SB_UpdateAccountStatus", processidParameter, idParameter, approvalstatusParameter, accountbatchidParameter, xmldatallistParameter);
        }
    
        public virtual ObjectResult<CM_Validate_BatchCode_Result> CM_Validate_BatchCode(string checkbatch, Nullable<bool> @bool, Nullable<int> id, string batchid)
        {
            var checkbatchParameter = checkbatch != null ?
                new ObjectParameter("checkbatch", checkbatch) :
                new ObjectParameter("checkbatch", typeof(string));
    
            var boolParameter = @bool.HasValue ?
                new ObjectParameter("bool", @bool) :
                new ObjectParameter("bool", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var batchidParameter = batchid != null ?
                new ObjectParameter("batchid", batchid) :
                new ObjectParameter("batchid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CM_Validate_BatchCode_Result>("CM_Validate_BatchCode", checkbatchParameter, boolParameter, idParameter, batchidParameter);
        }
    
        public virtual int deleteall()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteall");
        }
    
        public virtual ObjectResult<Employee_Login_Result> Employee_Login(string empUsername, string empPassword)
        {
            var empUsernameParameter = empUsername != null ?
                new ObjectParameter("EmpUsername", empUsername) :
                new ObjectParameter("EmpUsername", typeof(string));
    
            var empPasswordParameter = empPassword != null ?
                new ObjectParameter("EmpPassword", empPassword) :
                new ObjectParameter("EmpPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employee_Login_Result>("Employee_Login", empUsernameParameter, empPasswordParameter);
        }
    
        public virtual ObjectResult<Load_Bank_Result> Load_Bank(Nullable<int> id, string desc, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<bool> isactive, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(bool));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Load_Bank_Result>("Load_Bank", idParameter, descParameter, datefromParameter, datetoParameter, isactiveParameter, keywordParameter, rownoParameter);
        }
    
        public virtual ObjectResult<Load_CMForReturnSelection_Result> Load_CMForReturnSelection(Nullable<int> bankId, string keyword)
        {
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("bankId", bankId) :
                new ObjectParameter("bankId", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Load_CMForReturnSelection_Result>("Load_CMForReturnSelection", bankIdParameter, keywordParameter);
        }
    
        public virtual ObjectResult<Load_Comments_Result> Load_Comments(Nullable<int> id, string transactioncode)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var transactioncodeParameter = transactioncode != null ?
                new ObjectParameter("transactioncode", transactioncode) :
                new ObjectParameter("transactioncode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Load_Comments_Result>("Load_Comments", idParameter, transactioncodeParameter);
        }
    
        public virtual ObjectResult<string> load_contactperson(string transactioncode)
        {
            var transactioncodeParameter = transactioncode != null ?
                new ObjectParameter("transactioncode", transactioncode) :
                new ObjectParameter("transactioncode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("load_contactperson", transactioncodeParameter);
        }
    
        public virtual ObjectResult<Load_Lad_Result> Load_Lad(Nullable<int> id, string desc, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<bool> isactive, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(bool));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Load_Lad_Result>("Load_Lad", idParameter, descParameter, datefromParameter, datetoParameter, isactiveParameter, keywordParameter, rownoParameter);
        }
    
        public virtual ObjectResult<Load_LadGroup_Result> Load_LadGroup(Nullable<int> moduleid, Nullable<int> itemid, string tablename)
        {
            var moduleidParameter = moduleid.HasValue ?
                new ObjectParameter("moduleid", moduleid) :
                new ObjectParameter("moduleid", typeof(int));
    
            var itemidParameter = itemid.HasValue ?
                new ObjectParameter("itemid", itemid) :
                new ObjectParameter("itemid", typeof(int));
    
            var tablenameParameter = tablename != null ?
                new ObjectParameter("tablename", tablename) :
                new ObjectParameter("tablename", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Load_LadGroup_Result>("Load_LadGroup", moduleidParameter, itemidParameter, tablenameParameter);
        }
    
        public virtual ObjectResult<Load_LTOForReturnSelection_Result> Load_LTOForReturnSelection(Nullable<int> bankId, string keyword)
        {
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("bankId", bankId) :
                new ObjectParameter("bankId", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Load_LTOForReturnSelection_Result>("Load_LTOForReturnSelection", bankIdParameter, keywordParameter);
        }
    
        public virtual ObjectResult<Load_REMForReturnSelection_Result> Load_REMForReturnSelection(Nullable<int> bankId, string keyword)
        {
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("bankId", bankId) :
                new ObjectParameter("bankId", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Load_REMForReturnSelection_Result>("Load_REMForReturnSelection", bankIdParameter, keywordParameter);
        }
    
        public virtual ObjectResult<Load_ReportLink_Result> Load_ReportLink(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Load_ReportLink_Result>("Load_ReportLink", idParameter);
        }
    
        public virtual ObjectResult<Load_SB_CMMonthlyStatusReport_Result> Load_SB_CMMonthlyStatusReport(Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, string bankid, string status1, string status2, string status3, string status4, string status5, string status6, string status7, string status8)
        {
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var bankidParameter = bankid != null ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(string));
    
            var status1Parameter = status1 != null ?
                new ObjectParameter("status1", status1) :
                new ObjectParameter("status1", typeof(string));
    
            var status2Parameter = status2 != null ?
                new ObjectParameter("status2", status2) :
                new ObjectParameter("status2", typeof(string));
    
            var status3Parameter = status3 != null ?
                new ObjectParameter("status3", status3) :
                new ObjectParameter("status3", typeof(string));
    
            var status4Parameter = status4 != null ?
                new ObjectParameter("status4", status4) :
                new ObjectParameter("status4", typeof(string));
    
            var status5Parameter = status5 != null ?
                new ObjectParameter("status5", status5) :
                new ObjectParameter("status5", typeof(string));
    
            var status6Parameter = status6 != null ?
                new ObjectParameter("status6", status6) :
                new ObjectParameter("status6", typeof(string));
    
            var status7Parameter = status7 != null ?
                new ObjectParameter("status7", status7) :
                new ObjectParameter("status7", typeof(string));
    
            var status8Parameter = status8 != null ?
                new ObjectParameter("status8", status8) :
                new ObjectParameter("status8", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Load_SB_CMMonthlyStatusReport_Result>("Load_SB_CMMonthlyStatusReport", datefromParameter, datetoParameter, bankidParameter, status1Parameter, status2Parameter, status3Parameter, status4Parameter, status5Parameter, status6Parameter, status7Parameter, status8Parameter);
        }
    
        public virtual ObjectResult<Load_SB_LTOMonthlyStatusReport_Result> Load_SB_LTOMonthlyStatusReport(Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, string bankid, string status1, string status2, string status3, string status4, string status5, string status6, string status7)
        {
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var bankidParameter = bankid != null ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(string));
    
            var status1Parameter = status1 != null ?
                new ObjectParameter("status1", status1) :
                new ObjectParameter("status1", typeof(string));
    
            var status2Parameter = status2 != null ?
                new ObjectParameter("status2", status2) :
                new ObjectParameter("status2", typeof(string));
    
            var status3Parameter = status3 != null ?
                new ObjectParameter("status3", status3) :
                new ObjectParameter("status3", typeof(string));
    
            var status4Parameter = status4 != null ?
                new ObjectParameter("status4", status4) :
                new ObjectParameter("status4", typeof(string));
    
            var status5Parameter = status5 != null ?
                new ObjectParameter("status5", status5) :
                new ObjectParameter("status5", typeof(string));
    
            var status6Parameter = status6 != null ?
                new ObjectParameter("status6", status6) :
                new ObjectParameter("status6", typeof(string));
    
            var status7Parameter = status7 != null ?
                new ObjectParameter("status7", status7) :
                new ObjectParameter("status7", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Load_SB_LTOMonthlyStatusReport_Result>("Load_SB_LTOMonthlyStatusReport", datefromParameter, datetoParameter, bankidParameter, status1Parameter, status2Parameter, status3Parameter, status4Parameter, status5Parameter, status6Parameter, status7Parameter);
        }
    
        public virtual ObjectResult<Load_SB_MonthlyQuantityReport_Result> Load_SB_MonthlyQuantityReport(Nullable<System.DateTime> dateto, Nullable<int> bankid, string transactionname)
        {
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var bankidParameter = bankid.HasValue ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(int));
    
            var transactionnameParameter = transactionname != null ?
                new ObjectParameter("transactionname", transactionname) :
                new ObjectParameter("transactionname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Load_SB_MonthlyQuantityReport_Result>("Load_SB_MonthlyQuantityReport", datetoParameter, bankidParameter, transactionnameParameter);
        }
    
        public virtual ObjectResult<Load_SB_MonthlyQuantityReport_New_Result> Load_SB_MonthlyQuantityReport_New(Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, string bankid, string transactionname)
        {
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var bankidParameter = bankid != null ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(string));
    
            var transactionnameParameter = transactionname != null ?
                new ObjectParameter("transactionname", transactionname) :
                new ObjectParameter("transactionname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Load_SB_MonthlyQuantityReport_New_Result>("Load_SB_MonthlyQuantityReport_New", datefromParameter, datetoParameter, bankidParameter, transactionnameParameter);
        }
    
        public virtual ObjectResult<Load_SB_MonthlyStatusReport_Result> Load_SB_MonthlyStatusReport(Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, string bankid, string transactionname)
        {
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var bankidParameter = bankid != null ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(string));
    
            var transactionnameParameter = transactionname != null ?
                new ObjectParameter("transactionname", transactionname) :
                new ObjectParameter("transactionname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Load_SB_MonthlyStatusReport_Result>("Load_SB_MonthlyStatusReport", datefromParameter, datetoParameter, bankidParameter, transactionnameParameter);
        }
    
        public virtual ObjectResult<Load_SB_REMMonthlyStatusReport_Result> Load_SB_REMMonthlyStatusReport(Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, string bankid, string status1, string status2, string status3, string status4, string status5, string status6, string status7, string ctcstatus1, string ctcstatus2, string ctcstatus3, string ctcstatus4, string ctcstatus5)
        {
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var bankidParameter = bankid != null ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(string));
    
            var status1Parameter = status1 != null ?
                new ObjectParameter("status1", status1) :
                new ObjectParameter("status1", typeof(string));
    
            var status2Parameter = status2 != null ?
                new ObjectParameter("status2", status2) :
                new ObjectParameter("status2", typeof(string));
    
            var status3Parameter = status3 != null ?
                new ObjectParameter("status3", status3) :
                new ObjectParameter("status3", typeof(string));
    
            var status4Parameter = status4 != null ?
                new ObjectParameter("status4", status4) :
                new ObjectParameter("status4", typeof(string));
    
            var status5Parameter = status5 != null ?
                new ObjectParameter("status5", status5) :
                new ObjectParameter("status5", typeof(string));
    
            var status6Parameter = status6 != null ?
                new ObjectParameter("status6", status6) :
                new ObjectParameter("status6", typeof(string));
    
            var status7Parameter = status7 != null ?
                new ObjectParameter("status7", status7) :
                new ObjectParameter("status7", typeof(string));
    
            var ctcstatus1Parameter = ctcstatus1 != null ?
                new ObjectParameter("ctcstatus1", ctcstatus1) :
                new ObjectParameter("ctcstatus1", typeof(string));
    
            var ctcstatus2Parameter = ctcstatus2 != null ?
                new ObjectParameter("ctcstatus2", ctcstatus2) :
                new ObjectParameter("ctcstatus2", typeof(string));
    
            var ctcstatus3Parameter = ctcstatus3 != null ?
                new ObjectParameter("ctcstatus3", ctcstatus3) :
                new ObjectParameter("ctcstatus3", typeof(string));
    
            var ctcstatus4Parameter = ctcstatus4 != null ?
                new ObjectParameter("ctcstatus4", ctcstatus4) :
                new ObjectParameter("ctcstatus4", typeof(string));
    
            var ctcstatus5Parameter = ctcstatus5 != null ?
                new ObjectParameter("ctcstatus5", ctcstatus5) :
                new ObjectParameter("ctcstatus5", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Load_SB_REMMonthlyStatusReport_Result>("Load_SB_REMMonthlyStatusReport", datefromParameter, datetoParameter, bankidParameter, status1Parameter, status2Parameter, status3Parameter, status4Parameter, status5Parameter, status6Parameter, status7Parameter, ctcstatus1Parameter, ctcstatus2Parameter, ctcstatus3Parameter, ctcstatus4Parameter, ctcstatus5Parameter);
        }
    
        public virtual ObjectResult<Load_SelectionBudgetRequestCashiering_Result> Load_SelectionBudgetRequestCashiering(string status, string batchid)
        {
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var batchidParameter = batchid != null ?
                new ObjectParameter("batchid", batchid) :
                new ObjectParameter("batchid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Load_SelectionBudgetRequestCashiering_Result>("Load_SelectionBudgetRequestCashiering", statusParameter, batchidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Load_User_CanEdit(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Load_User_CanEdit", idParameter);
        }
    
        public virtual ObjectResult<Load_UserAccess_Result> Load_UserAccess(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Load_UserAccess_Result>("Load_UserAccess", idParameter);
        }
    
        public virtual ObjectResult<Load_UserAccessGroup_Result> Load_UserAccessGroup(Nullable<int> id, string desc, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<bool> isactive, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(bool));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Load_UserAccessGroup_Result>("Load_UserAccessGroup", idParameter, descParameter, datefromParameter, datetoParameter, isactiveParameter, keywordParameter, rownoParameter);
        }
    
        public virtual ObjectResult<LoadAccess_Account_Result> LoadAccess_Account(string name, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoadAccess_Account_Result>("LoadAccess_Account", nameParameter, useridParameter);
        }
    
        public virtual ObjectResult<LoadAccess_ForComboBox_Result> LoadAccess_ForComboBox(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoadAccess_ForComboBox_Result>("LoadAccess_ForComboBox", nameParameter);
        }
    
        public virtual ObjectResult<LoadCMSummaryReport_List_Result> LoadCMSummaryReport_List(Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto)
        {
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoadCMSummaryReport_List_Result>("LoadCMSummaryReport_List", datefromParameter, datetoParameter);
        }
    
        public virtual ObjectResult<LoadEmployee_Result> LoadEmployee(Nullable<int> id, string description, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, string keyword, Nullable<int> rowno, Nullable<bool> isactive)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoadEmployee_Result>("LoadEmployee", idParameter, descriptionParameter, datefromParameter, datetoParameter, keywordParameter, rownoParameter, isactiveParameter);
        }
    
        public virtual ObjectResult<string> LoadLTOComboBox(string itemname)
        {
            var itemnameParameter = itemname != null ?
                new ObjectParameter("itemname", itemname) :
                new ObjectParameter("itemname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("LoadLTOComboBox", itemnameParameter);
        }
    
        public virtual int LoadLTOSummaryReport_List(Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto)
        {
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LoadLTOSummaryReport_List", datefromParameter, datetoParameter);
        }
    
        public virtual ObjectResult<LoadReleaseSelection_Result> LoadReleaseSelection(string transactiontype, Nullable<int> id)
        {
            var transactiontypeParameter = transactiontype != null ?
                new ObjectParameter("transactiontype", transactiontype) :
                new ObjectParameter("transactiontype", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoadReleaseSelection_Result>("LoadReleaseSelection", transactiontypeParameter, idParameter);
        }
    
        public virtual int LoadRMSummaryReport_List(Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto)
        {
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LoadRMSummaryReport_List", datefromParameter, datetoParameter);
        }
    
        public virtual ObjectResult<LoadTable_Result> LoadTable(string keyword)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoadTable_Result>("LoadTable", keywordParameter);
        }
    
        public virtual ObjectResult<LTO_SB_Accounts_Load_Result> LTO_SB_Accounts_Load(Nullable<int> id, string bank, Nullable<int> address, Nullable<int> fieldoffice, Nullable<int> status, Nullable<bool> isProcessing, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, string keyword, Nullable<int> rowno, Nullable<int> agency)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var bankParameter = bank != null ?
                new ObjectParameter("bank", bank) :
                new ObjectParameter("bank", typeof(string));
    
            var addressParameter = address.HasValue ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(int));
    
            var fieldofficeParameter = fieldoffice.HasValue ?
                new ObjectParameter("fieldoffice", fieldoffice) :
                new ObjectParameter("fieldoffice", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var isProcessingParameter = isProcessing.HasValue ?
                new ObjectParameter("isProcessing", isProcessing) :
                new ObjectParameter("isProcessing", typeof(bool));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            var agencyParameter = agency.HasValue ?
                new ObjectParameter("agency", agency) :
                new ObjectParameter("agency", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LTO_SB_Accounts_Load_Result>("LTO_SB_Accounts_Load", idParameter, bankParameter, addressParameter, fieldofficeParameter, statusParameter, isProcessingParameter, datefromParameter, datetoParameter, keywordParameter, rownoParameter, agencyParameter);
        }
    
        public virtual ObjectResult<LTO_SB_Accounts_Selection_Encumbrance_Load_Result> LTO_SB_Accounts_Selection_Encumbrance_Load(Nullable<int> accountid, Nullable<int> ltofieldofficeid, Nullable<int> ltoagency, string keyword, Nullable<int> rowno)
        {
            var accountidParameter = accountid.HasValue ?
                new ObjectParameter("accountid", accountid) :
                new ObjectParameter("accountid", typeof(int));
    
            var ltofieldofficeidParameter = ltofieldofficeid.HasValue ?
                new ObjectParameter("ltofieldofficeid", ltofieldofficeid) :
                new ObjectParameter("ltofieldofficeid", typeof(int));
    
            var ltoagencyParameter = ltoagency.HasValue ?
                new ObjectParameter("ltoagency", ltoagency) :
                new ObjectParameter("ltoagency", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LTO_SB_Accounts_Selection_Encumbrance_Load_Result>("LTO_SB_Accounts_Selection_Encumbrance_Load", accountidParameter, ltofieldofficeidParameter, ltoagencyParameter, keywordParameter, rownoParameter);
        }
    
        public virtual ObjectResult<LTO_SB_Accounts_Selection_Load_Result> LTO_SB_Accounts_Selection_Load(Nullable<int> accountid, Nullable<int> bankid, Nullable<int> ltofieldofficeid, Nullable<int> ltoaddressid, Nullable<int> ltoagencyid, string keyword, Nullable<int> rowno, Nullable<int> statusid, Nullable<bool> isconfirmation)
        {
            var accountidParameter = accountid.HasValue ?
                new ObjectParameter("accountid", accountid) :
                new ObjectParameter("accountid", typeof(int));
    
            var bankidParameter = bankid.HasValue ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(int));
    
            var ltofieldofficeidParameter = ltofieldofficeid.HasValue ?
                new ObjectParameter("ltofieldofficeid", ltofieldofficeid) :
                new ObjectParameter("ltofieldofficeid", typeof(int));
    
            var ltoaddressidParameter = ltoaddressid.HasValue ?
                new ObjectParameter("ltoaddressid", ltoaddressid) :
                new ObjectParameter("ltoaddressid", typeof(int));
    
            var ltoagencyidParameter = ltoagencyid.HasValue ?
                new ObjectParameter("ltoagencyid", ltoagencyid) :
                new ObjectParameter("ltoagencyid", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            var statusidParameter = statusid.HasValue ?
                new ObjectParameter("statusid", statusid) :
                new ObjectParameter("statusid", typeof(int));
    
            var isconfirmationParameter = isconfirmation.HasValue ?
                new ObjectParameter("isconfirmation", isconfirmation) :
                new ObjectParameter("isconfirmation", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LTO_SB_Accounts_Selection_Load_Result>("LTO_SB_Accounts_Selection_Load", accountidParameter, bankidParameter, ltofieldofficeidParameter, ltoaddressidParameter, ltoagencyidParameter, keywordParameter, rownoParameter, statusidParameter, isconfirmationParameter);
        }
    
        public virtual ObjectResult<LTO_SB_Batch_Load_Result> LTO_SB_Batch_Load(Nullable<int> id, string bankId, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var bankIdParameter = bankId != null ?
                new ObjectParameter("bankId", bankId) :
                new ObjectParameter("bankId", typeof(string));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LTO_SB_Batch_Load_Result>("LTO_SB_Batch_Load", idParameter, bankIdParameter, datefromParameter, datetoParameter, keywordParameter, rownoParameter);
        }
    
        public virtual int LTO_SB_Batch_SaveUpdate(Nullable<bool> booledit, Nullable<int> id, string batchID, Nullable<System.DateTime> dateReceived, Nullable<int> bankId, Nullable<int> staffInChargeID, Nullable<int> encodedById, string xmldatallist)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var batchIDParameter = batchID != null ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(string));
    
            var dateReceivedParameter = dateReceived.HasValue ?
                new ObjectParameter("DateReceived", dateReceived) :
                new ObjectParameter("DateReceived", typeof(System.DateTime));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var staffInChargeIDParameter = staffInChargeID.HasValue ?
                new ObjectParameter("StaffInChargeID", staffInChargeID) :
                new ObjectParameter("StaffInChargeID", typeof(int));
    
            var encodedByIdParameter = encodedById.HasValue ?
                new ObjectParameter("EncodedById", encodedById) :
                new ObjectParameter("EncodedById", typeof(int));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LTO_SB_Batch_SaveUpdate", booleditParameter, idParameter, batchIDParameter, dateReceivedParameter, bankIdParameter, staffInChargeIDParameter, encodedByIdParameter, xmldatallistParameter);
        }
    
        public virtual ObjectResult<LTO_SB_Billing_Load_Result> LTO_SB_Billing_Load(Nullable<int> id, string bankcode, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<int> status, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var bankcodeParameter = bankcode != null ?
                new ObjectParameter("bankcode", bankcode) :
                new ObjectParameter("bankcode", typeof(string));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LTO_SB_Billing_Load_Result>("LTO_SB_Billing_Load", idParameter, bankcodeParameter, datefromParameter, datetoParameter, statusParameter, keywordParameter, rownoParameter);
        }
    
        public virtual int LTO_SB_Billing_SaveUpdate(Nullable<bool> booledit, Nullable<int> id, Nullable<int> transmittalid, Nullable<int> bankid, Nullable<System.DateTime> billingdate, string contactpersonid, Nullable<int> preparedbyid, Nullable<int> checkedbyid, Nullable<int> approvedbyid, Nullable<int> encodedbyid, Nullable<bool> isprocess, Nullable<int> approvalstatus, Nullable<int> batchstatus, Nullable<int> billingnumber, string batchno, string xmldatallist)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var transmittalidParameter = transmittalid.HasValue ?
                new ObjectParameter("transmittalid", transmittalid) :
                new ObjectParameter("transmittalid", typeof(int));
    
            var bankidParameter = bankid.HasValue ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(int));
    
            var billingdateParameter = billingdate.HasValue ?
                new ObjectParameter("billingdate", billingdate) :
                new ObjectParameter("billingdate", typeof(System.DateTime));
    
            var contactpersonidParameter = contactpersonid != null ?
                new ObjectParameter("contactpersonid", contactpersonid) :
                new ObjectParameter("contactpersonid", typeof(string));
    
            var preparedbyidParameter = preparedbyid.HasValue ?
                new ObjectParameter("preparedbyid", preparedbyid) :
                new ObjectParameter("preparedbyid", typeof(int));
    
            var checkedbyidParameter = checkedbyid.HasValue ?
                new ObjectParameter("checkedbyid", checkedbyid) :
                new ObjectParameter("checkedbyid", typeof(int));
    
            var approvedbyidParameter = approvedbyid.HasValue ?
                new ObjectParameter("approvedbyid", approvedbyid) :
                new ObjectParameter("approvedbyid", typeof(int));
    
            var encodedbyidParameter = encodedbyid.HasValue ?
                new ObjectParameter("encodedbyid", encodedbyid) :
                new ObjectParameter("encodedbyid", typeof(int));
    
            var isprocessParameter = isprocess.HasValue ?
                new ObjectParameter("isprocess", isprocess) :
                new ObjectParameter("isprocess", typeof(bool));
    
            var approvalstatusParameter = approvalstatus.HasValue ?
                new ObjectParameter("approvalstatus", approvalstatus) :
                new ObjectParameter("approvalstatus", typeof(int));
    
            var batchstatusParameter = batchstatus.HasValue ?
                new ObjectParameter("batchstatus", batchstatus) :
                new ObjectParameter("batchstatus", typeof(int));
    
            var billingnumberParameter = billingnumber.HasValue ?
                new ObjectParameter("billingnumber", billingnumber) :
                new ObjectParameter("billingnumber", typeof(int));
    
            var batchnoParameter = batchno != null ?
                new ObjectParameter("batchno", batchno) :
                new ObjectParameter("batchno", typeof(string));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LTO_SB_Billing_SaveUpdate", booleditParameter, idParameter, transmittalidParameter, bankidParameter, billingdateParameter, contactpersonidParameter, preparedbyidParameter, checkedbyidParameter, approvedbyidParameter, encodedbyidParameter, isprocessParameter, approvalstatusParameter, batchstatusParameter, billingnumberParameter, batchnoParameter, xmldatallistParameter);
        }
    
        public virtual ObjectResult<LTO_SB_For_Confirmation_Load_Result> LTO_SB_For_Confirmation_Load(Nullable<int> id, Nullable<int> fieldofficeid, Nullable<int> ltoagencyid, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<int> status, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var fieldofficeidParameter = fieldofficeid.HasValue ?
                new ObjectParameter("fieldofficeid", fieldofficeid) :
                new ObjectParameter("fieldofficeid", typeof(int));
    
            var ltoagencyidParameter = ltoagencyid.HasValue ?
                new ObjectParameter("ltoagencyid", ltoagencyid) :
                new ObjectParameter("ltoagencyid", typeof(int));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LTO_SB_For_Confirmation_Load_Result>("LTO_SB_For_Confirmation_Load", idParameter, fieldofficeidParameter, ltoagencyidParameter, datefromParameter, datetoParameter, statusParameter, keywordParameter, rownoParameter);
        }
    
        public virtual int LTO_SB_For_Confirmation_SaveUpdate(Nullable<bool> booledit, Nullable<int> id, string forconfirmationbatch, Nullable<int> fieldofficeid, Nullable<int> ltoagencyid, Nullable<System.DateTime> targetdate, Nullable<System.DateTime> daterecieved, Nullable<int> staffinchargeid, Nullable<int> checkedbyid, Nullable<int> approvedbyid, Nullable<int> encodedbyid, Nullable<int> approvalstatus, Nullable<int> batchstatus, Nullable<bool> isprocess, string xmldatallist)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var forconfirmationbatchParameter = forconfirmationbatch != null ?
                new ObjectParameter("forconfirmationbatch", forconfirmationbatch) :
                new ObjectParameter("forconfirmationbatch", typeof(string));
    
            var fieldofficeidParameter = fieldofficeid.HasValue ?
                new ObjectParameter("fieldofficeid", fieldofficeid) :
                new ObjectParameter("fieldofficeid", typeof(int));
    
            var ltoagencyidParameter = ltoagencyid.HasValue ?
                new ObjectParameter("ltoagencyid", ltoagencyid) :
                new ObjectParameter("ltoagencyid", typeof(int));
    
            var targetdateParameter = targetdate.HasValue ?
                new ObjectParameter("targetdate", targetdate) :
                new ObjectParameter("targetdate", typeof(System.DateTime));
    
            var daterecievedParameter = daterecieved.HasValue ?
                new ObjectParameter("daterecieved", daterecieved) :
                new ObjectParameter("daterecieved", typeof(System.DateTime));
    
            var staffinchargeidParameter = staffinchargeid.HasValue ?
                new ObjectParameter("staffinchargeid", staffinchargeid) :
                new ObjectParameter("staffinchargeid", typeof(int));
    
            var checkedbyidParameter = checkedbyid.HasValue ?
                new ObjectParameter("checkedbyid", checkedbyid) :
                new ObjectParameter("checkedbyid", typeof(int));
    
            var approvedbyidParameter = approvedbyid.HasValue ?
                new ObjectParameter("approvedbyid", approvedbyid) :
                new ObjectParameter("approvedbyid", typeof(int));
    
            var encodedbyidParameter = encodedbyid.HasValue ?
                new ObjectParameter("encodedbyid", encodedbyid) :
                new ObjectParameter("encodedbyid", typeof(int));
    
            var approvalstatusParameter = approvalstatus.HasValue ?
                new ObjectParameter("approvalstatus", approvalstatus) :
                new ObjectParameter("approvalstatus", typeof(int));
    
            var batchstatusParameter = batchstatus.HasValue ?
                new ObjectParameter("batchstatus", batchstatus) :
                new ObjectParameter("batchstatus", typeof(int));
    
            var isprocessParameter = isprocess.HasValue ?
                new ObjectParameter("isprocess", isprocess) :
                new ObjectParameter("isprocess", typeof(bool));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LTO_SB_For_Confirmation_SaveUpdate", booleditParameter, idParameter, forconfirmationbatchParameter, fieldofficeidParameter, ltoagencyidParameter, targetdateParameter, daterecievedParameter, staffinchargeidParameter, checkedbyidParameter, approvedbyidParameter, encodedbyidParameter, approvalstatusParameter, batchstatusParameter, isprocessParameter, xmldatallistParameter);
        }
    
        public virtual ObjectResult<LTO_SB_For_ConfirmationReply_Load_Result> LTO_SB_For_ConfirmationReply_Load(Nullable<int> id, Nullable<int> fieldofficeid, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<int> status, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var fieldofficeidParameter = fieldofficeid.HasValue ?
                new ObjectParameter("fieldofficeid", fieldofficeid) :
                new ObjectParameter("fieldofficeid", typeof(int));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LTO_SB_For_ConfirmationReply_Load_Result>("LTO_SB_For_ConfirmationReply_Load", idParameter, fieldofficeidParameter, datefromParameter, datetoParameter, statusParameter, keywordParameter, rownoParameter);
        }
    
        public virtual int LTO_SB_For_ConfirmationReply_SaveUpdate(Nullable<bool> booledit, Nullable<int> id, string forconfirmationreplybatch, Nullable<int> fieldaddressid, Nullable<System.DateTime> targetdate, Nullable<System.DateTime> daterecieved, Nullable<int> staffinchargeid, Nullable<int> checkedbyid, Nullable<int> approvedbyid, Nullable<int> encodedbyid, Nullable<int> approvalstatus, Nullable<int> batchstatus, Nullable<bool> isprocess, string xmldatallist)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var forconfirmationreplybatchParameter = forconfirmationreplybatch != null ?
                new ObjectParameter("forconfirmationreplybatch", forconfirmationreplybatch) :
                new ObjectParameter("forconfirmationreplybatch", typeof(string));
    
            var fieldaddressidParameter = fieldaddressid.HasValue ?
                new ObjectParameter("fieldaddressid", fieldaddressid) :
                new ObjectParameter("fieldaddressid", typeof(int));
    
            var targetdateParameter = targetdate.HasValue ?
                new ObjectParameter("targetdate", targetdate) :
                new ObjectParameter("targetdate", typeof(System.DateTime));
    
            var daterecievedParameter = daterecieved.HasValue ?
                new ObjectParameter("daterecieved", daterecieved) :
                new ObjectParameter("daterecieved", typeof(System.DateTime));
    
            var staffinchargeidParameter = staffinchargeid.HasValue ?
                new ObjectParameter("staffinchargeid", staffinchargeid) :
                new ObjectParameter("staffinchargeid", typeof(int));
    
            var checkedbyidParameter = checkedbyid.HasValue ?
                new ObjectParameter("checkedbyid", checkedbyid) :
                new ObjectParameter("checkedbyid", typeof(int));
    
            var approvedbyidParameter = approvedbyid.HasValue ?
                new ObjectParameter("approvedbyid", approvedbyid) :
                new ObjectParameter("approvedbyid", typeof(int));
    
            var encodedbyidParameter = encodedbyid.HasValue ?
                new ObjectParameter("encodedbyid", encodedbyid) :
                new ObjectParameter("encodedbyid", typeof(int));
    
            var approvalstatusParameter = approvalstatus.HasValue ?
                new ObjectParameter("approvalstatus", approvalstatus) :
                new ObjectParameter("approvalstatus", typeof(int));
    
            var batchstatusParameter = batchstatus.HasValue ?
                new ObjectParameter("batchstatus", batchstatus) :
                new ObjectParameter("batchstatus", typeof(int));
    
            var isprocessParameter = isprocess.HasValue ?
                new ObjectParameter("isprocess", isprocess) :
                new ObjectParameter("isprocess", typeof(bool));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LTO_SB_For_ConfirmationReply_SaveUpdate", booleditParameter, idParameter, forconfirmationreplybatchParameter, fieldaddressidParameter, targetdateParameter, daterecievedParameter, staffinchargeidParameter, checkedbyidParameter, approvedbyidParameter, encodedbyidParameter, approvalstatusParameter, batchstatusParameter, isprocessParameter, xmldatallistParameter);
        }
    
        public virtual ObjectResult<LTO_SB_For_Encumbrance_Load_Result> LTO_SB_For_Encumbrance_Load(Nullable<int> id, Nullable<int> fieldofficeid, Nullable<int> ltoagencyid, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<int> status, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var fieldofficeidParameter = fieldofficeid.HasValue ?
                new ObjectParameter("fieldofficeid", fieldofficeid) :
                new ObjectParameter("fieldofficeid", typeof(int));
    
            var ltoagencyidParameter = ltoagencyid.HasValue ?
                new ObjectParameter("ltoagencyid", ltoagencyid) :
                new ObjectParameter("ltoagencyid", typeof(int));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LTO_SB_For_Encumbrance_Load_Result>("LTO_SB_For_Encumbrance_Load", idParameter, fieldofficeidParameter, ltoagencyidParameter, datefromParameter, datetoParameter, statusParameter, keywordParameter, rownoParameter);
        }
    
        public virtual int LTO_SB_For_Encumbrance_SaveUpdate(Nullable<bool> booledit, Nullable<int> id, string encumbrancebatch, Nullable<int> fieldofficeid, Nullable<int> ltoagencyid, Nullable<System.DateTime> targetdate, Nullable<System.DateTime> daterecieved, Nullable<int> staffinchargeid, Nullable<int> checkedbyid, Nullable<int> approvedbyid, Nullable<int> encodedbyid, Nullable<int> approvalstatus, Nullable<int> batchstatus, Nullable<bool> isprocess, string reginaldirectorname, string officerincharge, string xmldatallist)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var encumbrancebatchParameter = encumbrancebatch != null ?
                new ObjectParameter("encumbrancebatch", encumbrancebatch) :
                new ObjectParameter("encumbrancebatch", typeof(string));
    
            var fieldofficeidParameter = fieldofficeid.HasValue ?
                new ObjectParameter("fieldofficeid", fieldofficeid) :
                new ObjectParameter("fieldofficeid", typeof(int));
    
            var ltoagencyidParameter = ltoagencyid.HasValue ?
                new ObjectParameter("ltoagencyid", ltoagencyid) :
                new ObjectParameter("ltoagencyid", typeof(int));
    
            var targetdateParameter = targetdate.HasValue ?
                new ObjectParameter("targetdate", targetdate) :
                new ObjectParameter("targetdate", typeof(System.DateTime));
    
            var daterecievedParameter = daterecieved.HasValue ?
                new ObjectParameter("daterecieved", daterecieved) :
                new ObjectParameter("daterecieved", typeof(System.DateTime));
    
            var staffinchargeidParameter = staffinchargeid.HasValue ?
                new ObjectParameter("staffinchargeid", staffinchargeid) :
                new ObjectParameter("staffinchargeid", typeof(int));
    
            var checkedbyidParameter = checkedbyid.HasValue ?
                new ObjectParameter("checkedbyid", checkedbyid) :
                new ObjectParameter("checkedbyid", typeof(int));
    
            var approvedbyidParameter = approvedbyid.HasValue ?
                new ObjectParameter("approvedbyid", approvedbyid) :
                new ObjectParameter("approvedbyid", typeof(int));
    
            var encodedbyidParameter = encodedbyid.HasValue ?
                new ObjectParameter("encodedbyid", encodedbyid) :
                new ObjectParameter("encodedbyid", typeof(int));
    
            var approvalstatusParameter = approvalstatus.HasValue ?
                new ObjectParameter("approvalstatus", approvalstatus) :
                new ObjectParameter("approvalstatus", typeof(int));
    
            var batchstatusParameter = batchstatus.HasValue ?
                new ObjectParameter("batchstatus", batchstatus) :
                new ObjectParameter("batchstatus", typeof(int));
    
            var isprocessParameter = isprocess.HasValue ?
                new ObjectParameter("isprocess", isprocess) :
                new ObjectParameter("isprocess", typeof(bool));
    
            var reginaldirectornameParameter = reginaldirectorname != null ?
                new ObjectParameter("reginaldirectorname", reginaldirectorname) :
                new ObjectParameter("reginaldirectorname", typeof(string));
    
            var officerinchargeParameter = officerincharge != null ?
                new ObjectParameter("officerincharge", officerincharge) :
                new ObjectParameter("officerincharge", typeof(string));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LTO_SB_For_Encumbrance_SaveUpdate", booleditParameter, idParameter, encumbrancebatchParameter, fieldofficeidParameter, ltoagencyidParameter, targetdateParameter, daterecievedParameter, staffinchargeidParameter, checkedbyidParameter, approvedbyidParameter, encodedbyidParameter, approvalstatusParameter, batchstatusParameter, isprocessParameter, reginaldirectornameParameter, officerinchargeParameter, xmldatallistParameter);
        }
    
        public virtual ObjectResult<LTO_SB_For_Return_Load_Result> LTO_SB_For_Return_Load(Nullable<int> id, string bankid, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<int> status, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var bankidParameter = bankid != null ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(string));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LTO_SB_For_Return_Load_Result>("LTO_SB_For_Return_Load", idParameter, bankidParameter, datefromParameter, datetoParameter, statusParameter, keywordParameter, rownoParameter);
        }
    
        public virtual ObjectResult<LTO_SB_For_Return_LoadReport_Result> LTO_SB_For_Return_LoadReport(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LTO_SB_For_Return_LoadReport_Result>("LTO_SB_For_Return_LoadReport", idParameter);
        }
    
        public virtual ObjectResult<LTO_SB_For_Transmittal_Load_Result> LTO_SB_For_Transmittal_Load(Nullable<int> id, string bankid, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<int> status, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var bankidParameter = bankid != null ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(string));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LTO_SB_For_Transmittal_Load_Result>("LTO_SB_For_Transmittal_Load", idParameter, bankidParameter, datefromParameter, datetoParameter, statusParameter, keywordParameter, rownoParameter);
        }
    
        public virtual int LTO_SB_For_Transmittal_SaveUpdate(Nullable<bool> booledit, Nullable<int> id, string transmittalbatch, Nullable<int> bankid, string recievedbyname, Nullable<int> encodedById, Nullable<bool> isprocess, Nullable<int> approvalstatus, Nullable<int> batchstatus, string xmldatallist)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var transmittalbatchParameter = transmittalbatch != null ?
                new ObjectParameter("transmittalbatch", transmittalbatch) :
                new ObjectParameter("transmittalbatch", typeof(string));
    
            var bankidParameter = bankid.HasValue ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(int));
    
            var recievedbynameParameter = recievedbyname != null ?
                new ObjectParameter("recievedbyname", recievedbyname) :
                new ObjectParameter("recievedbyname", typeof(string));
    
            var encodedByIdParameter = encodedById.HasValue ?
                new ObjectParameter("EncodedById", encodedById) :
                new ObjectParameter("EncodedById", typeof(int));
    
            var isprocessParameter = isprocess.HasValue ?
                new ObjectParameter("isprocess", isprocess) :
                new ObjectParameter("isprocess", typeof(bool));
    
            var approvalstatusParameter = approvalstatus.HasValue ?
                new ObjectParameter("approvalstatus", approvalstatus) :
                new ObjectParameter("approvalstatus", typeof(int));
    
            var batchstatusParameter = batchstatus.HasValue ?
                new ObjectParameter("batchstatus", batchstatus) :
                new ObjectParameter("batchstatus", typeof(int));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LTO_SB_For_Transmittal_SaveUpdate", booleditParameter, idParameter, transmittalbatchParameter, bankidParameter, recievedbynameParameter, encodedByIdParameter, isprocessParameter, approvalstatusParameter, batchstatusParameter, xmldatallistParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> LTO_SB_Get_Row(string transactionname)
        {
            var transactionnameParameter = transactionname != null ?
                new ObjectParameter("transactionname", transactionname) :
                new ObjectParameter("transactionname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("LTO_SB_Get_Row", transactionnameParameter);
        }
    
        public virtual ObjectResult<LTO_SB_Released_Load_Result> LTO_SB_Released_Load(Nullable<int> id, Nullable<int> fieldofficeid, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<int> status, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var fieldofficeidParameter = fieldofficeid.HasValue ?
                new ObjectParameter("fieldofficeid", fieldofficeid) :
                new ObjectParameter("fieldofficeid", typeof(int));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LTO_SB_Released_Load_Result>("LTO_SB_Released_Load", idParameter, fieldofficeidParameter, datefromParameter, datetoParameter, statusParameter, keywordParameter, rownoParameter);
        }
    
        public virtual int LTO_SB_Released_SaveUpdate(Nullable<bool> booledit, Nullable<int> id, string releasedid, Nullable<int> fieldofficeid, Nullable<int> encodedById, Nullable<bool> isprocess, Nullable<int> approvalstatus, Nullable<int> batchstatus, string xmldatallist)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var releasedidParameter = releasedid != null ?
                new ObjectParameter("releasedid", releasedid) :
                new ObjectParameter("releasedid", typeof(string));
    
            var fieldofficeidParameter = fieldofficeid.HasValue ?
                new ObjectParameter("fieldofficeid", fieldofficeid) :
                new ObjectParameter("fieldofficeid", typeof(int));
    
            var encodedByIdParameter = encodedById.HasValue ?
                new ObjectParameter("EncodedById", encodedById) :
                new ObjectParameter("EncodedById", typeof(int));
    
            var isprocessParameter = isprocess.HasValue ?
                new ObjectParameter("isprocess", isprocess) :
                new ObjectParameter("isprocess", typeof(bool));
    
            var approvalstatusParameter = approvalstatus.HasValue ?
                new ObjectParameter("approvalstatus", approvalstatus) :
                new ObjectParameter("approvalstatus", typeof(int));
    
            var batchstatusParameter = batchstatus.HasValue ?
                new ObjectParameter("batchstatus", batchstatus) :
                new ObjectParameter("batchstatus", typeof(int));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LTO_SB_Released_SaveUpdate", booleditParameter, idParameter, releasedidParameter, fieldofficeidParameter, encodedByIdParameter, isprocessParameter, approvalstatusParameter, batchstatusParameter, xmldatallistParameter);
        }
    
        public virtual ObjectResult<LTO_SB_Report_Result> LTO_SB_Report(string reportdescription, Nullable<int> id)
        {
            var reportdescriptionParameter = reportdescription != null ?
                new ObjectParameter("reportdescription", reportdescription) :
                new ObjectParameter("reportdescription", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LTO_SB_Report_Result>("LTO_SB_Report", reportdescriptionParameter, idParameter);
        }
    
        public virtual int LTO_SB_Return_SaveUpdate(Nullable<bool> booledit, Nullable<int> id, string returnbatch, Nullable<int> bankid, string recievedbyname, Nullable<int> encodedById, Nullable<bool> isprocess, Nullable<int> approvalstatus, string xmldatallist)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var returnbatchParameter = returnbatch != null ?
                new ObjectParameter("returnbatch", returnbatch) :
                new ObjectParameter("returnbatch", typeof(string));
    
            var bankidParameter = bankid.HasValue ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(int));
    
            var recievedbynameParameter = recievedbyname != null ?
                new ObjectParameter("recievedbyname", recievedbyname) :
                new ObjectParameter("recievedbyname", typeof(string));
    
            var encodedByIdParameter = encodedById.HasValue ?
                new ObjectParameter("EncodedById", encodedById) :
                new ObjectParameter("EncodedById", typeof(int));
    
            var isprocessParameter = isprocess.HasValue ?
                new ObjectParameter("isprocess", isprocess) :
                new ObjectParameter("isprocess", typeof(bool));
    
            var approvalstatusParameter = approvalstatus.HasValue ?
                new ObjectParameter("approvalstatus", approvalstatus) :
                new ObjectParameter("approvalstatus", typeof(int));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LTO_SB_Return_SaveUpdate", booleditParameter, idParameter, returnbatchParameter, bankidParameter, recievedbynameParameter, encodedByIdParameter, isprocessParameter, approvalstatusParameter, xmldatallistParameter);
        }
    
        public virtual ObjectResult<LTO_SB_Selection_Transmittal_Load_Result> LTO_SB_Selection_Transmittal_Load(Nullable<int> bankid)
        {
            var bankidParameter = bankid.HasValue ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LTO_SB_Selection_Transmittal_Load_Result>("LTO_SB_Selection_Transmittal_Load", bankidParameter);
        }
    
        public virtual int LTO_SB_UpdateAccount(Nullable<int> id, string accountName, string mvfileno, string engineNo, Nullable<int> ltofieldofficeid, Nullable<int> ltoaddressid, Nullable<int> ltoagencyid, Nullable<decimal> gratuityFee, Nullable<decimal> serviceFee, Nullable<decimal> lTOFee, string crno, string rDORNo, Nullable<System.DateTime> dateOfEntry, Nullable<int> statusid)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var mvfilenoParameter = mvfileno != null ?
                new ObjectParameter("mvfileno", mvfileno) :
                new ObjectParameter("mvfileno", typeof(string));
    
            var engineNoParameter = engineNo != null ?
                new ObjectParameter("EngineNo", engineNo) :
                new ObjectParameter("EngineNo", typeof(string));
    
            var ltofieldofficeidParameter = ltofieldofficeid.HasValue ?
                new ObjectParameter("ltofieldofficeid", ltofieldofficeid) :
                new ObjectParameter("ltofieldofficeid", typeof(int));
    
            var ltoaddressidParameter = ltoaddressid.HasValue ?
                new ObjectParameter("ltoaddressid", ltoaddressid) :
                new ObjectParameter("ltoaddressid", typeof(int));
    
            var ltoagencyidParameter = ltoagencyid.HasValue ?
                new ObjectParameter("ltoagencyid", ltoagencyid) :
                new ObjectParameter("ltoagencyid", typeof(int));
    
            var gratuityFeeParameter = gratuityFee.HasValue ?
                new ObjectParameter("GratuityFee", gratuityFee) :
                new ObjectParameter("GratuityFee", typeof(decimal));
    
            var serviceFeeParameter = serviceFee.HasValue ?
                new ObjectParameter("ServiceFee", serviceFee) :
                new ObjectParameter("ServiceFee", typeof(decimal));
    
            var lTOFeeParameter = lTOFee.HasValue ?
                new ObjectParameter("LTOFee", lTOFee) :
                new ObjectParameter("LTOFee", typeof(decimal));
    
            var crnoParameter = crno != null ?
                new ObjectParameter("crno", crno) :
                new ObjectParameter("crno", typeof(string));
    
            var rDORNoParameter = rDORNo != null ?
                new ObjectParameter("RDORNo", rDORNo) :
                new ObjectParameter("RDORNo", typeof(string));
    
            var dateOfEntryParameter = dateOfEntry.HasValue ?
                new ObjectParameter("DateOfEntry", dateOfEntry) :
                new ObjectParameter("DateOfEntry", typeof(System.DateTime));
    
            var statusidParameter = statusid.HasValue ?
                new ObjectParameter("statusid", statusid) :
                new ObjectParameter("statusid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LTO_SB_UpdateAccount", idParameter, accountNameParameter, mvfilenoParameter, engineNoParameter, ltofieldofficeidParameter, ltoaddressidParameter, ltoagencyidParameter, gratuityFeeParameter, serviceFeeParameter, lTOFeeParameter, crnoParameter, rDORNoParameter, dateOfEntryParameter, statusidParameter);
        }
    
        public virtual int LTO_SB_UpdateAccountStatus(string processid, Nullable<int> id, Nullable<int> approvalstatus, Nullable<int> accountbatchid, string xmldatallist)
        {
            var processidParameter = processid != null ?
                new ObjectParameter("processid", processid) :
                new ObjectParameter("processid", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var approvalstatusParameter = approvalstatus.HasValue ?
                new ObjectParameter("approvalstatus", approvalstatus) :
                new ObjectParameter("approvalstatus", typeof(int));
    
            var accountbatchidParameter = accountbatchid.HasValue ?
                new ObjectParameter("accountbatchid", accountbatchid) :
                new ObjectParameter("accountbatchid", typeof(int));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LTO_SB_UpdateAccountStatus", processidParameter, idParameter, approvalstatusParameter, accountbatchidParameter, xmldatallistParameter);
        }
    
        public virtual ObjectResult<LTO_Validate_Batch_Result> LTO_Validate_Batch(Nullable<bool> @bool, Nullable<int> id, string batchid, string trans)
        {
            var boolParameter = @bool.HasValue ?
                new ObjectParameter("bool", @bool) :
                new ObjectParameter("bool", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var batchidParameter = batchid != null ?
                new ObjectParameter("batchid", batchid) :
                new ObjectParameter("batchid", typeof(string));
    
            var transParameter = trans != null ?
                new ObjectParameter("trans", trans) :
                new ObjectParameter("trans", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LTO_Validate_Batch_Result>("LTO_Validate_Batch", boolParameter, idParameter, batchidParameter, transParameter);
        }
    
        public virtual ObjectResult<LTOAgency_Load_Result> LTOAgency_Load(Nullable<int> id, string desc, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<bool> isactive, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(bool));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LTOAgency_Load_Result>("LTOAgency_Load", idParameter, descParameter, datefromParameter, datetoParameter, isactiveParameter, keywordParameter, rownoParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> LTOAgency_SaveUpdate(Nullable<bool> booledit, Nullable<int> id, string description, Nullable<decimal> requestedbudgetfee, Nullable<decimal> confirmationfee, Nullable<bool> isactive, Nullable<int> encodedbyid, Nullable<decimal> servicefee)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var requestedbudgetfeeParameter = requestedbudgetfee.HasValue ?
                new ObjectParameter("requestedbudgetfee", requestedbudgetfee) :
                new ObjectParameter("requestedbudgetfee", typeof(decimal));
    
            var confirmationfeeParameter = confirmationfee.HasValue ?
                new ObjectParameter("confirmationfee", confirmationfee) :
                new ObjectParameter("confirmationfee", typeof(decimal));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(bool));
    
            var encodedbyidParameter = encodedbyid.HasValue ?
                new ObjectParameter("encodedbyid", encodedbyid) :
                new ObjectParameter("encodedbyid", typeof(int));
    
            var servicefeeParameter = servicefee.HasValue ?
                new ObjectParameter("servicefee", servicefee) :
                new ObjectParameter("servicefee", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("LTOAgency_SaveUpdate", booleditParameter, idParameter, descriptionParameter, requestedbudgetfeeParameter, confirmationfeeParameter, isactiveParameter, encodedbyidParameter, servicefeeParameter);
        }
    
        public virtual ObjectResult<LTOAmount_Load_Result> LTOAmount_Load()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LTOAmount_Load_Result>("LTOAmount_Load");
        }
    
        public virtual int LTOAmount_SaveUpdate(Nullable<int> id, Nullable<decimal> amount)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LTOAmount_SaveUpdate", idParameter, amountParameter);
        }
    
        public virtual ObjectResult<LTOFieldAddress_Load_Result> LTOFieldAddress_Load(Nullable<int> id, string desc, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<bool> isactive, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(bool));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LTOFieldAddress_Load_Result>("LTOFieldAddress_Load", idParameter, descParameter, datefromParameter, datetoParameter, isactiveParameter, keywordParameter, rownoParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> LTOFieldAddress_SaveUpdate(Nullable<bool> booledit, Nullable<int> id, string description, Nullable<int> agencyid, Nullable<bool> isactive, Nullable<int> encodedbyid)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var agencyidParameter = agencyid.HasValue ?
                new ObjectParameter("agencyid", agencyid) :
                new ObjectParameter("agencyid", typeof(int));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(bool));
    
            var encodedbyidParameter = encodedbyid.HasValue ?
                new ObjectParameter("encodedbyid", encodedbyid) :
                new ObjectParameter("encodedbyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("LTOFieldAddress_SaveUpdate", booleditParameter, idParameter, descriptionParameter, agencyidParameter, isactiveParameter, encodedbyidParameter);
        }
    
        public virtual ObjectResult<LTOFieldOffice_Load_Result> LTOFieldOffice_Load(Nullable<int> id, string desc, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<bool> isactive, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(bool));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LTOFieldOffice_Load_Result>("LTOFieldOffice_Load", idParameter, descParameter, datefromParameter, datetoParameter, isactiveParameter, keywordParameter, rownoParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> LTOFieldOffice_SaveUpdate(Nullable<bool> booledit, Nullable<int> id, string description, Nullable<bool> isConfirmation, Nullable<int> encodedbyid, Nullable<bool> isactive, Nullable<decimal> confirmationreplyfee)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var isConfirmationParameter = isConfirmation.HasValue ?
                new ObjectParameter("IsConfirmation", isConfirmation) :
                new ObjectParameter("IsConfirmation", typeof(bool));
    
            var encodedbyidParameter = encodedbyid.HasValue ?
                new ObjectParameter("encodedbyid", encodedbyid) :
                new ObjectParameter("encodedbyid", typeof(int));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(bool));
    
            var confirmationreplyfeeParameter = confirmationreplyfee.HasValue ?
                new ObjectParameter("confirmationreplyfee", confirmationreplyfee) :
                new ObjectParameter("confirmationreplyfee", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("LTOFieldOffice_SaveUpdate", booleditParameter, idParameter, descriptionParameter, isConfirmationParameter, encodedbyidParameter, isactiveParameter, confirmationreplyfeeParameter);
        }
    
        public virtual ObjectResult<RegistryOfDeeds_Load_Result> RegistryOfDeeds_Load(Nullable<int> id, string desc, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<bool> isactive, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(bool));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RegistryOfDeeds_Load_Result>("RegistryOfDeeds_Load", idParameter, descParameter, datefromParameter, datetoParameter, isactiveParameter, keywordParameter, rownoParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> RegistryOfDeeds_SaveUpdate(Nullable<bool> booledit, Nullable<int> id, string description, Nullable<int> encodedby, Nullable<bool> isactive, Nullable<bool> isinsideregion, Nullable<decimal> cmamount, Nullable<decimal> remamount, Nullable<decimal> cmrdfee, Nullable<decimal> remrdfee, Nullable<decimal> remctcamount)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var encodedbyParameter = encodedby.HasValue ?
                new ObjectParameter("encodedby", encodedby) :
                new ObjectParameter("encodedby", typeof(int));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(bool));
    
            var isinsideregionParameter = isinsideregion.HasValue ?
                new ObjectParameter("isinsideregion", isinsideregion) :
                new ObjectParameter("isinsideregion", typeof(bool));
    
            var cmamountParameter = cmamount.HasValue ?
                new ObjectParameter("cmamount", cmamount) :
                new ObjectParameter("cmamount", typeof(decimal));
    
            var remamountParameter = remamount.HasValue ?
                new ObjectParameter("remamount", remamount) :
                new ObjectParameter("remamount", typeof(decimal));
    
            var cmrdfeeParameter = cmrdfee.HasValue ?
                new ObjectParameter("cmrdfee", cmrdfee) :
                new ObjectParameter("cmrdfee", typeof(decimal));
    
            var remrdfeeParameter = remrdfee.HasValue ?
                new ObjectParameter("remrdfee", remrdfee) :
                new ObjectParameter("remrdfee", typeof(decimal));
    
            var remctcamountParameter = remctcamount.HasValue ?
                new ObjectParameter("remctcamount", remctcamount) :
                new ObjectParameter("remctcamount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("RegistryOfDeeds_SaveUpdate", booleditParameter, idParameter, descriptionParameter, encodedbyParameter, isactiveParameter, isinsideregionParameter, cmamountParameter, remamountParameter, cmrdfeeParameter, remrdfeeParameter, remctcamountParameter);
        }
    
        public virtual ObjectResult<RegistryOfDeeds_Validate_Result> RegistryOfDeeds_Validate(Nullable<bool> @bool, Nullable<int> id, string desc)
        {
            var boolParameter = @bool.HasValue ?
                new ObjectParameter("bool", @bool) :
                new ObjectParameter("bool", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RegistryOfDeeds_Validate_Result>("RegistryOfDeeds_Validate", boolParameter, idParameter, descParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> REM_SB_Accounts_BatchOnly_SaveUpdate(Nullable<bool> booledit, Nullable<int> id, string batchID, Nullable<System.DateTime> dateReceived, Nullable<int> bankId, Nullable<int> staffInChargeID, Nullable<int> encodedById)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var batchIDParameter = batchID != null ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(string));
    
            var dateReceivedParameter = dateReceived.HasValue ?
                new ObjectParameter("DateReceived", dateReceived) :
                new ObjectParameter("DateReceived", typeof(System.DateTime));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var staffInChargeIDParameter = staffInChargeID.HasValue ?
                new ObjectParameter("StaffInChargeID", staffInChargeID) :
                new ObjectParameter("StaffInChargeID", typeof(int));
    
            var encodedByIdParameter = encodedById.HasValue ?
                new ObjectParameter("EncodedById", encodedById) :
                new ObjectParameter("EncodedById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("REM_SB_Accounts_BatchOnly_SaveUpdate", booleditParameter, idParameter, batchIDParameter, dateReceivedParameter, bankIdParameter, staffInChargeIDParameter, encodedByIdParameter);
        }
    
        public virtual int REM_SB_Accounts_EntryOnly_Delete(Nullable<int> batchID)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REM_SB_Accounts_EntryOnly_Delete", batchIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> REM_SB_Accounts_EntryOnly_SaveUpdate(Nullable<int> batchreferenceid, Nullable<int> registyOfDeedsId, string accountName, string loanAmount, string tctno)
        {
            var batchreferenceidParameter = batchreferenceid.HasValue ?
                new ObjectParameter("batchreferenceid", batchreferenceid) :
                new ObjectParameter("batchreferenceid", typeof(int));
    
            var registyOfDeedsIdParameter = registyOfDeedsId.HasValue ?
                new ObjectParameter("RegistyOfDeedsId", registyOfDeedsId) :
                new ObjectParameter("RegistyOfDeedsId", typeof(int));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var loanAmountParameter = loanAmount != null ?
                new ObjectParameter("LoanAmount", loanAmount) :
                new ObjectParameter("LoanAmount", typeof(string));
    
            var tctnoParameter = tctno != null ?
                new ObjectParameter("tctno", tctno) :
                new ObjectParameter("tctno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("REM_SB_Accounts_EntryOnly_SaveUpdate", batchreferenceidParameter, registyOfDeedsIdParameter, accountNameParameter, loanAmountParameter, tctnoParameter);
        }
    
        public virtual int REM_SB_Accounts_ListOfDocument_Delete(Nullable<int> batchID)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REM_SB_Accounts_ListOfDocument_Delete", batchIDParameter);
        }
    
        public virtual int REM_SB_Accounts_ListOfDocument_Delete_PerAccount(Nullable<int> accountId)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REM_SB_Accounts_ListOfDocument_Delete_PerAccount", accountIdParameter);
        }
    
        public virtual ObjectResult<REM_SB_Accounts_ListOfDocument_Load_Result> REM_SB_Accounts_ListOfDocument_Load(Nullable<int> accountid)
        {
            var accountidParameter = accountid.HasValue ?
                new ObjectParameter("accountid", accountid) :
                new ObjectParameter("accountid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REM_SB_Accounts_ListOfDocument_Load_Result>("REM_SB_Accounts_ListOfDocument_Load", accountidParameter);
        }
    
        public virtual int REM_SB_Accounts_ListOfDocument_SaveUpdate(Nullable<int> accountid, Nullable<int> batchid, Nullable<int> documentId, string description, Nullable<System.DateTime> pickUpDate, string employeeId, string comment)
        {
            var accountidParameter = accountid.HasValue ?
                new ObjectParameter("accountid", accountid) :
                new ObjectParameter("accountid", typeof(int));
    
            var batchidParameter = batchid.HasValue ?
                new ObjectParameter("batchid", batchid) :
                new ObjectParameter("batchid", typeof(int));
    
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var pickUpDateParameter = pickUpDate.HasValue ?
                new ObjectParameter("PickUpDate", pickUpDate) :
                new ObjectParameter("PickUpDate", typeof(System.DateTime));
    
            var employeeIdParameter = employeeId != null ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REM_SB_Accounts_ListOfDocument_SaveUpdate", accountidParameter, batchidParameter, documentIdParameter, descriptionParameter, pickUpDateParameter, employeeIdParameter, commentParameter);
        }
    
        public virtual ObjectResult<REM_SB_Accounts_Load_Result> REM_SB_Accounts_Load(Nullable<int> id, string bank, string registryOfDeeds, string status, Nullable<bool> isProcessing, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, string keyword, Nullable<int> rowno, Nullable<int> ctcstatus)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var bankParameter = bank != null ?
                new ObjectParameter("bank", bank) :
                new ObjectParameter("bank", typeof(string));
    
            var registryOfDeedsParameter = registryOfDeeds != null ?
                new ObjectParameter("registryOfDeeds", registryOfDeeds) :
                new ObjectParameter("registryOfDeeds", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var isProcessingParameter = isProcessing.HasValue ?
                new ObjectParameter("isProcessing", isProcessing) :
                new ObjectParameter("isProcessing", typeof(bool));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            var ctcstatusParameter = ctcstatus.HasValue ?
                new ObjectParameter("ctcstatus", ctcstatus) :
                new ObjectParameter("ctcstatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REM_SB_Accounts_Load_Result>("REM_SB_Accounts_Load", idParameter, bankParameter, registryOfDeedsParameter, statusParameter, isProcessingParameter, datefromParameter, datetoParameter, keywordParameter, rownoParameter, ctcstatusParameter);
        }
    
        public virtual ObjectResult<REM_SB_Accounts_Load_ForReleaseSelection_Result> REM_SB_Accounts_Load_ForReleaseSelection(Nullable<int> id, string bank, string registryOfDeeds, string status, Nullable<bool> isProcessing, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var bankParameter = bank != null ?
                new ObjectParameter("bank", bank) :
                new ObjectParameter("bank", typeof(string));
    
            var registryOfDeedsParameter = registryOfDeeds != null ?
                new ObjectParameter("registryOfDeeds", registryOfDeeds) :
                new ObjectParameter("registryOfDeeds", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var isProcessingParameter = isProcessing.HasValue ?
                new ObjectParameter("isProcessing", isProcessing) :
                new ObjectParameter("isProcessing", typeof(bool));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REM_SB_Accounts_Load_ForReleaseSelection_Result>("REM_SB_Accounts_Load_ForReleaseSelection", idParameter, bankParameter, registryOfDeedsParameter, statusParameter, isProcessingParameter, datefromParameter, datetoParameter, keywordParameter, rownoParameter);
        }
    
        public virtual ObjectResult<REM_SB_Batch_Load_Result> REM_SB_Batch_Load(Nullable<int> id, string bankId, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var bankIdParameter = bankId != null ?
                new ObjectParameter("bankId", bankId) :
                new ObjectParameter("bankId", typeof(string));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REM_SB_Batch_Load_Result>("REM_SB_Batch_Load", idParameter, bankIdParameter, datefromParameter, datetoParameter, keywordParameter, rownoParameter);
        }
    
        public virtual int REM_SB_Batch_SaveUpdate(Nullable<bool> booledit, Nullable<int> id, string batchID, Nullable<System.DateTime> dateReceived, Nullable<int> bankId, string staffInChargeID, Nullable<int> encodedById, string xmldatallist)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var batchIDParameter = batchID != null ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(string));
    
            var dateReceivedParameter = dateReceived.HasValue ?
                new ObjectParameter("DateReceived", dateReceived) :
                new ObjectParameter("DateReceived", typeof(System.DateTime));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var staffInChargeIDParameter = staffInChargeID != null ?
                new ObjectParameter("StaffInChargeID", staffInChargeID) :
                new ObjectParameter("StaffInChargeID", typeof(string));
    
            var encodedByIdParameter = encodedById.HasValue ?
                new ObjectParameter("EncodedById", encodedById) :
                new ObjectParameter("EncodedById", typeof(int));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REM_SB_Batch_SaveUpdate", booleditParameter, idParameter, batchIDParameter, dateReceivedParameter, bankIdParameter, staffInChargeIDParameter, encodedByIdParameter, xmldatallistParameter);
        }
    
        public virtual ObjectResult<REM_SB_Billing_Load_Result> REM_SB_Billing_Load(Nullable<int> id, string bankcode, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<int> status, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var bankcodeParameter = bankcode != null ?
                new ObjectParameter("bankcode", bankcode) :
                new ObjectParameter("bankcode", typeof(string));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REM_SB_Billing_Load_Result>("REM_SB_Billing_Load", idParameter, bankcodeParameter, datefromParameter, datetoParameter, statusParameter, keywordParameter, rownoParameter);
        }
    
        public virtual int REM_SB_Billing_SaveUpdate(Nullable<bool> booledit, Nullable<int> id, Nullable<int> transmittalid, Nullable<int> bankid, Nullable<System.DateTime> billingdate, string contactpersonid, Nullable<int> preparedbyid, Nullable<int> checkedbyid, Nullable<int> approvedbyid, Nullable<int> encodedbyid, Nullable<bool> isprocess, Nullable<int> approvalstatus, Nullable<int> batchstatus, Nullable<int> billingnumber, string batchno, string xmldatallist)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var transmittalidParameter = transmittalid.HasValue ?
                new ObjectParameter("transmittalid", transmittalid) :
                new ObjectParameter("transmittalid", typeof(int));
    
            var bankidParameter = bankid.HasValue ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(int));
    
            var billingdateParameter = billingdate.HasValue ?
                new ObjectParameter("billingdate", billingdate) :
                new ObjectParameter("billingdate", typeof(System.DateTime));
    
            var contactpersonidParameter = contactpersonid != null ?
                new ObjectParameter("contactpersonid", contactpersonid) :
                new ObjectParameter("contactpersonid", typeof(string));
    
            var preparedbyidParameter = preparedbyid.HasValue ?
                new ObjectParameter("preparedbyid", preparedbyid) :
                new ObjectParameter("preparedbyid", typeof(int));
    
            var checkedbyidParameter = checkedbyid.HasValue ?
                new ObjectParameter("checkedbyid", checkedbyid) :
                new ObjectParameter("checkedbyid", typeof(int));
    
            var approvedbyidParameter = approvedbyid.HasValue ?
                new ObjectParameter("approvedbyid", approvedbyid) :
                new ObjectParameter("approvedbyid", typeof(int));
    
            var encodedbyidParameter = encodedbyid.HasValue ?
                new ObjectParameter("encodedbyid", encodedbyid) :
                new ObjectParameter("encodedbyid", typeof(int));
    
            var isprocessParameter = isprocess.HasValue ?
                new ObjectParameter("isprocess", isprocess) :
                new ObjectParameter("isprocess", typeof(bool));
    
            var approvalstatusParameter = approvalstatus.HasValue ?
                new ObjectParameter("approvalstatus", approvalstatus) :
                new ObjectParameter("approvalstatus", typeof(int));
    
            var batchstatusParameter = batchstatus.HasValue ?
                new ObjectParameter("batchstatus", batchstatus) :
                new ObjectParameter("batchstatus", typeof(int));
    
            var billingnumberParameter = billingnumber.HasValue ?
                new ObjectParameter("billingnumber", billingnumber) :
                new ObjectParameter("billingnumber", typeof(int));
    
            var batchnoParameter = batchno != null ?
                new ObjectParameter("batchno", batchno) :
                new ObjectParameter("batchno", typeof(string));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REM_SB_Billing_SaveUpdate", booleditParameter, idParameter, transmittalidParameter, bankidParameter, billingdateParameter, contactpersonidParameter, preparedbyidParameter, checkedbyidParameter, approvedbyidParameter, encodedbyidParameter, isprocessParameter, approvalstatusParameter, batchstatusParameter, billingnumberParameter, batchnoParameter, xmldatallistParameter);
        }
    
        public virtual ObjectResult<REM_SB_BudgetRequest_Load_Result> REM_SB_BudgetRequest_Load(Nullable<int> id, string registryofdeeds, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<int> status, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var registryofdeedsParameter = registryofdeeds != null ?
                new ObjectParameter("registryofdeeds", registryofdeeds) :
                new ObjectParameter("registryofdeeds", typeof(string));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REM_SB_BudgetRequest_Load_Result>("REM_SB_BudgetRequest_Load", idParameter, registryofdeedsParameter, datefromParameter, datetoParameter, statusParameter, keywordParameter, rownoParameter);
        }
    
        public virtual int REM_SB_BudgetRequest_SaveUpdate(Nullable<bool> booledit, Nullable<int> id, string budgetrequestid, Nullable<int> registryofdeedsid, Nullable<System.DateTime> targetdate, Nullable<System.DateTime> daterecieved, Nullable<int> staffinchargeid, Nullable<int> checkedbyid, Nullable<int> approvedbyid, Nullable<decimal> requestedbudget, Nullable<int> encodedById, Nullable<int> approvalstatus, Nullable<int> batchstatus, Nullable<bool> isprocess, string xmldatallist)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var budgetrequestidParameter = budgetrequestid != null ?
                new ObjectParameter("budgetrequestid", budgetrequestid) :
                new ObjectParameter("budgetrequestid", typeof(string));
    
            var registryofdeedsidParameter = registryofdeedsid.HasValue ?
                new ObjectParameter("registryofdeedsid", registryofdeedsid) :
                new ObjectParameter("registryofdeedsid", typeof(int));
    
            var targetdateParameter = targetdate.HasValue ?
                new ObjectParameter("targetdate", targetdate) :
                new ObjectParameter("targetdate", typeof(System.DateTime));
    
            var daterecievedParameter = daterecieved.HasValue ?
                new ObjectParameter("daterecieved", daterecieved) :
                new ObjectParameter("daterecieved", typeof(System.DateTime));
    
            var staffinchargeidParameter = staffinchargeid.HasValue ?
                new ObjectParameter("staffinchargeid", staffinchargeid) :
                new ObjectParameter("staffinchargeid", typeof(int));
    
            var checkedbyidParameter = checkedbyid.HasValue ?
                new ObjectParameter("checkedbyid", checkedbyid) :
                new ObjectParameter("checkedbyid", typeof(int));
    
            var approvedbyidParameter = approvedbyid.HasValue ?
                new ObjectParameter("approvedbyid", approvedbyid) :
                new ObjectParameter("approvedbyid", typeof(int));
    
            var requestedbudgetParameter = requestedbudget.HasValue ?
                new ObjectParameter("requestedbudget", requestedbudget) :
                new ObjectParameter("requestedbudget", typeof(decimal));
    
            var encodedByIdParameter = encodedById.HasValue ?
                new ObjectParameter("EncodedById", encodedById) :
                new ObjectParameter("EncodedById", typeof(int));
    
            var approvalstatusParameter = approvalstatus.HasValue ?
                new ObjectParameter("approvalstatus", approvalstatus) :
                new ObjectParameter("approvalstatus", typeof(int));
    
            var batchstatusParameter = batchstatus.HasValue ?
                new ObjectParameter("batchstatus", batchstatus) :
                new ObjectParameter("batchstatus", typeof(int));
    
            var isprocessParameter = isprocess.HasValue ?
                new ObjectParameter("isprocess", isprocess) :
                new ObjectParameter("isprocess", typeof(bool));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REM_SB_BudgetRequest_SaveUpdate", booleditParameter, idParameter, budgetrequestidParameter, registryofdeedsidParameter, targetdateParameter, daterecievedParameter, staffinchargeidParameter, checkedbyidParameter, approvedbyidParameter, requestedbudgetParameter, encodedByIdParameter, approvalstatusParameter, batchstatusParameter, isprocessParameter, xmldatallistParameter);
        }
    
        public virtual ObjectResult<REM_SB_CTC_Accounts_Load_Result> REM_SB_CTC_Accounts_Load(Nullable<int> id, string bank, string registryOfDeeds, string status, Nullable<bool> isProcessing, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var bankParameter = bank != null ?
                new ObjectParameter("bank", bank) :
                new ObjectParameter("bank", typeof(string));
    
            var registryOfDeedsParameter = registryOfDeeds != null ?
                new ObjectParameter("registryOfDeeds", registryOfDeeds) :
                new ObjectParameter("registryOfDeeds", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var isProcessingParameter = isProcessing.HasValue ?
                new ObjectParameter("isProcessing", isProcessing) :
                new ObjectParameter("isProcessing", typeof(bool));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REM_SB_CTC_Accounts_Load_Result>("REM_SB_CTC_Accounts_Load", idParameter, bankParameter, registryOfDeedsParameter, statusParameter, isProcessingParameter, datefromParameter, datetoParameter, keywordParameter, rownoParameter);
        }
    
        public virtual ObjectResult<REM_SB_CTC_Billing_Load_Result> REM_SB_CTC_Billing_Load(Nullable<int> id, string bankcode, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<int> status, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var bankcodeParameter = bankcode != null ?
                new ObjectParameter("bankcode", bankcode) :
                new ObjectParameter("bankcode", typeof(string));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REM_SB_CTC_Billing_Load_Result>("REM_SB_CTC_Billing_Load", idParameter, bankcodeParameter, datefromParameter, datetoParameter, statusParameter, keywordParameter, rownoParameter);
        }
    
        public virtual int REM_SB_CTC_Billing_SaveUpdate(Nullable<bool> booledit, Nullable<int> id, string billingid, Nullable<int> bankid, Nullable<System.DateTime> billingdate, string contactpersonid, Nullable<int> preparedbyid, Nullable<int> checkedbyid, Nullable<int> approvedbyid, Nullable<int> encodedbyid, Nullable<bool> isprocess, Nullable<int> approvalstatus, Nullable<int> batchstatus, Nullable<int> billingnumber, string xmldatallist)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var billingidParameter = billingid != null ?
                new ObjectParameter("billingid", billingid) :
                new ObjectParameter("billingid", typeof(string));
    
            var bankidParameter = bankid.HasValue ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(int));
    
            var billingdateParameter = billingdate.HasValue ?
                new ObjectParameter("billingdate", billingdate) :
                new ObjectParameter("billingdate", typeof(System.DateTime));
    
            var contactpersonidParameter = contactpersonid != null ?
                new ObjectParameter("contactpersonid", contactpersonid) :
                new ObjectParameter("contactpersonid", typeof(string));
    
            var preparedbyidParameter = preparedbyid.HasValue ?
                new ObjectParameter("preparedbyid", preparedbyid) :
                new ObjectParameter("preparedbyid", typeof(int));
    
            var checkedbyidParameter = checkedbyid.HasValue ?
                new ObjectParameter("checkedbyid", checkedbyid) :
                new ObjectParameter("checkedbyid", typeof(int));
    
            var approvedbyidParameter = approvedbyid.HasValue ?
                new ObjectParameter("approvedbyid", approvedbyid) :
                new ObjectParameter("approvedbyid", typeof(int));
    
            var encodedbyidParameter = encodedbyid.HasValue ?
                new ObjectParameter("encodedbyid", encodedbyid) :
                new ObjectParameter("encodedbyid", typeof(int));
    
            var isprocessParameter = isprocess.HasValue ?
                new ObjectParameter("isprocess", isprocess) :
                new ObjectParameter("isprocess", typeof(bool));
    
            var approvalstatusParameter = approvalstatus.HasValue ?
                new ObjectParameter("approvalstatus", approvalstatus) :
                new ObjectParameter("approvalstatus", typeof(int));
    
            var batchstatusParameter = batchstatus.HasValue ?
                new ObjectParameter("batchstatus", batchstatus) :
                new ObjectParameter("batchstatus", typeof(int));
    
            var billingnumberParameter = billingnumber.HasValue ?
                new ObjectParameter("billingnumber", billingnumber) :
                new ObjectParameter("billingnumber", typeof(int));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REM_SB_CTC_Billing_SaveUpdate", booleditParameter, idParameter, billingidParameter, bankidParameter, billingdateParameter, contactpersonidParameter, preparedbyidParameter, checkedbyidParameter, approvedbyidParameter, encodedbyidParameter, isprocessParameter, approvalstatusParameter, batchstatusParameter, billingnumberParameter, xmldatallistParameter);
        }
    
        public virtual ObjectResult<REM_SB_CTC_BudgetRequest_Load_Result> REM_SB_CTC_BudgetRequest_Load(Nullable<int> id, string registryofdeeds, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<int> status, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var registryofdeedsParameter = registryofdeeds != null ?
                new ObjectParameter("registryofdeeds", registryofdeeds) :
                new ObjectParameter("registryofdeeds", typeof(string));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REM_SB_CTC_BudgetRequest_Load_Result>("REM_SB_CTC_BudgetRequest_Load", idParameter, registryofdeedsParameter, datefromParameter, datetoParameter, statusParameter, keywordParameter, rownoParameter);
        }
    
        public virtual int REM_SB_CTC_BudgetRequest_SaveUpdate(Nullable<bool> booledit, Nullable<int> id, string budgetrequestid, Nullable<int> registryofdeedsid, Nullable<System.DateTime> targetdate, Nullable<System.DateTime> daterecieved, Nullable<int> staffinchargeid, Nullable<int> checkedbyid, Nullable<int> approvedbyid, Nullable<decimal> requestedbudget, Nullable<int> encodedById, Nullable<int> approvalstatus, Nullable<int> batchstatus, Nullable<bool> isprocess, string xmldatallist)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var budgetrequestidParameter = budgetrequestid != null ?
                new ObjectParameter("budgetrequestid", budgetrequestid) :
                new ObjectParameter("budgetrequestid", typeof(string));
    
            var registryofdeedsidParameter = registryofdeedsid.HasValue ?
                new ObjectParameter("registryofdeedsid", registryofdeedsid) :
                new ObjectParameter("registryofdeedsid", typeof(int));
    
            var targetdateParameter = targetdate.HasValue ?
                new ObjectParameter("targetdate", targetdate) :
                new ObjectParameter("targetdate", typeof(System.DateTime));
    
            var daterecievedParameter = daterecieved.HasValue ?
                new ObjectParameter("daterecieved", daterecieved) :
                new ObjectParameter("daterecieved", typeof(System.DateTime));
    
            var staffinchargeidParameter = staffinchargeid.HasValue ?
                new ObjectParameter("staffinchargeid", staffinchargeid) :
                new ObjectParameter("staffinchargeid", typeof(int));
    
            var checkedbyidParameter = checkedbyid.HasValue ?
                new ObjectParameter("checkedbyid", checkedbyid) :
                new ObjectParameter("checkedbyid", typeof(int));
    
            var approvedbyidParameter = approvedbyid.HasValue ?
                new ObjectParameter("approvedbyid", approvedbyid) :
                new ObjectParameter("approvedbyid", typeof(int));
    
            var requestedbudgetParameter = requestedbudget.HasValue ?
                new ObjectParameter("requestedbudget", requestedbudget) :
                new ObjectParameter("requestedbudget", typeof(decimal));
    
            var encodedByIdParameter = encodedById.HasValue ?
                new ObjectParameter("EncodedById", encodedById) :
                new ObjectParameter("EncodedById", typeof(int));
    
            var approvalstatusParameter = approvalstatus.HasValue ?
                new ObjectParameter("approvalstatus", approvalstatus) :
                new ObjectParameter("approvalstatus", typeof(int));
    
            var batchstatusParameter = batchstatus.HasValue ?
                new ObjectParameter("batchstatus", batchstatus) :
                new ObjectParameter("batchstatus", typeof(int));
    
            var isprocessParameter = isprocess.HasValue ?
                new ObjectParameter("isprocess", isprocess) :
                new ObjectParameter("isprocess", typeof(bool));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REM_SB_CTC_BudgetRequest_SaveUpdate", booleditParameter, idParameter, budgetrequestidParameter, registryofdeedsidParameter, targetdateParameter, daterecievedParameter, staffinchargeidParameter, checkedbyidParameter, approvedbyidParameter, requestedbudgetParameter, encodedByIdParameter, approvalstatusParameter, batchstatusParameter, isprocessParameter, xmldatallistParameter);
        }
    
        public virtual ObjectResult<REM_SB_CTC_OtherExpenses_Load_Result> REM_SB_CTC_OtherExpenses_Load(string batchid)
        {
            var batchidParameter = batchid != null ?
                new ObjectParameter("batchid", batchid) :
                new ObjectParameter("batchid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REM_SB_CTC_OtherExpenses_Load_Result>("REM_SB_CTC_OtherExpenses_Load", batchidParameter);
        }
    
        public virtual int REM_SB_CTC_OtherExpenses_SaveUpdate(Nullable<int> id, string xmldatallist)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REM_SB_CTC_OtherExpenses_SaveUpdate", idParameter, xmldatallistParameter);
        }
    
        public virtual ObjectResult<REM_SB_CTC_Released_Load_Result> REM_SB_CTC_Released_Load(Nullable<int> id, string registryofdeeds, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<int> status, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var registryofdeedsParameter = registryofdeeds != null ?
                new ObjectParameter("registryofdeeds", registryofdeeds) :
                new ObjectParameter("registryofdeeds", typeof(string));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REM_SB_CTC_Released_Load_Result>("REM_SB_CTC_Released_Load", idParameter, registryofdeedsParameter, datefromParameter, datetoParameter, statusParameter, keywordParameter, rownoParameter);
        }
    
        public virtual int REM_SB_CTC_Released_SaveUpdate(Nullable<bool> booledit, Nullable<int> id, string releasedid, Nullable<int> registryofdeedsid, Nullable<int> encodedById, Nullable<bool> isprocess, Nullable<int> approvalstatus, Nullable<int> batchstatus, string xmldatallist)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var releasedidParameter = releasedid != null ?
                new ObjectParameter("releasedid", releasedid) :
                new ObjectParameter("releasedid", typeof(string));
    
            var registryofdeedsidParameter = registryofdeedsid.HasValue ?
                new ObjectParameter("registryofdeedsid", registryofdeedsid) :
                new ObjectParameter("registryofdeedsid", typeof(int));
    
            var encodedByIdParameter = encodedById.HasValue ?
                new ObjectParameter("EncodedById", encodedById) :
                new ObjectParameter("EncodedById", typeof(int));
    
            var isprocessParameter = isprocess.HasValue ?
                new ObjectParameter("isprocess", isprocess) :
                new ObjectParameter("isprocess", typeof(bool));
    
            var approvalstatusParameter = approvalstatus.HasValue ?
                new ObjectParameter("approvalstatus", approvalstatus) :
                new ObjectParameter("approvalstatus", typeof(int));
    
            var batchstatusParameter = batchstatus.HasValue ?
                new ObjectParameter("batchstatus", batchstatus) :
                new ObjectParameter("batchstatus", typeof(int));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REM_SB_CTC_Released_SaveUpdate", booleditParameter, idParameter, releasedidParameter, registryofdeedsidParameter, encodedByIdParameter, isprocessParameter, approvalstatusParameter, batchstatusParameter, xmldatallistParameter);
        }
    
        public virtual ObjectResult<REM_SB_CTC_Transmittal_Load_Result> REM_SB_CTC_Transmittal_Load(Nullable<int> id, string bankid, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<int> status, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var bankidParameter = bankid != null ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(string));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REM_SB_CTC_Transmittal_Load_Result>("REM_SB_CTC_Transmittal_Load", idParameter, bankidParameter, datefromParameter, datetoParameter, statusParameter, keywordParameter, rownoParameter);
        }
    
        public virtual int REM_SB_CTC_Transmittal_SaveUpdate(Nullable<bool> booledit, Nullable<int> id, string transmittalbatch, Nullable<int> bankid, string recievedbyname, Nullable<int> encodedById, Nullable<bool> isprocess, Nullable<int> approvalstatus, Nullable<int> batchstatus, string xmldatallist)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var transmittalbatchParameter = transmittalbatch != null ?
                new ObjectParameter("transmittalbatch", transmittalbatch) :
                new ObjectParameter("transmittalbatch", typeof(string));
    
            var bankidParameter = bankid.HasValue ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(int));
    
            var recievedbynameParameter = recievedbyname != null ?
                new ObjectParameter("recievedbyname", recievedbyname) :
                new ObjectParameter("recievedbyname", typeof(string));
    
            var encodedByIdParameter = encodedById.HasValue ?
                new ObjectParameter("EncodedById", encodedById) :
                new ObjectParameter("EncodedById", typeof(int));
    
            var isprocessParameter = isprocess.HasValue ?
                new ObjectParameter("isprocess", isprocess) :
                new ObjectParameter("isprocess", typeof(bool));
    
            var approvalstatusParameter = approvalstatus.HasValue ?
                new ObjectParameter("approvalstatus", approvalstatus) :
                new ObjectParameter("approvalstatus", typeof(int));
    
            var batchstatusParameter = batchstatus.HasValue ?
                new ObjectParameter("batchstatus", batchstatus) :
                new ObjectParameter("batchstatus", typeof(int));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REM_SB_CTC_Transmittal_SaveUpdate", booleditParameter, idParameter, transmittalbatchParameter, bankidParameter, recievedbynameParameter, encodedByIdParameter, isprocessParameter, approvalstatusParameter, batchstatusParameter, xmldatallistParameter);
        }
    
        public virtual int REM_SB_CTC_UpdateAccountStatus(string processid, Nullable<int> id, Nullable<int> approvalstatus, Nullable<int> accountbatchid, string xmldatallist)
        {
            var processidParameter = processid != null ?
                new ObjectParameter("processid", processid) :
                new ObjectParameter("processid", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var approvalstatusParameter = approvalstatus.HasValue ?
                new ObjectParameter("approvalstatus", approvalstatus) :
                new ObjectParameter("approvalstatus", typeof(int));
    
            var accountbatchidParameter = accountbatchid.HasValue ?
                new ObjectParameter("accountbatchid", accountbatchid) :
                new ObjectParameter("accountbatchid", typeof(int));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REM_SB_CTC_UpdateAccountStatus", processidParameter, idParameter, approvalstatusParameter, accountbatchidParameter, xmldatallistParameter);
        }
    
        public virtual ObjectResult<REM_SB_ListOfAccountsLoad_Result> REM_SB_ListOfAccountsLoad(Nullable<int> accountid)
        {
            var accountidParameter = accountid.HasValue ?
                new ObjectParameter("accountid", accountid) :
                new ObjectParameter("accountid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REM_SB_ListOfAccountsLoad_Result>("REM_SB_ListOfAccountsLoad", accountidParameter);
        }
    
        public virtual int REM_SB_OtherExpenses_Delete(string batchid)
        {
            var batchidParameter = batchid != null ?
                new ObjectParameter("batchid", batchid) :
                new ObjectParameter("batchid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REM_SB_OtherExpenses_Delete", batchidParameter);
        }
    
        public virtual ObjectResult<REM_SB_OtherExpenses_Load_Result> REM_SB_OtherExpenses_Load(string batchid)
        {
            var batchidParameter = batchid != null ?
                new ObjectParameter("batchid", batchid) :
                new ObjectParameter("batchid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REM_SB_OtherExpenses_Load_Result>("REM_SB_OtherExpenses_Load", batchidParameter);
        }
    
        public virtual int REM_SB_OtherExpenses_SaveUpdate(Nullable<int> id, string xmldatallist)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REM_SB_OtherExpenses_SaveUpdate", idParameter, xmldatallistParameter);
        }
    
        public virtual ObjectResult<REM_SB_Released_Load_Result> REM_SB_Released_Load(Nullable<int> id, string registryofdeeds, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<int> status, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var registryofdeedsParameter = registryofdeeds != null ?
                new ObjectParameter("registryofdeeds", registryofdeeds) :
                new ObjectParameter("registryofdeeds", typeof(string));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REM_SB_Released_Load_Result>("REM_SB_Released_Load", idParameter, registryofdeedsParameter, datefromParameter, datetoParameter, statusParameter, keywordParameter, rownoParameter);
        }
    
        public virtual int REM_SB_Released_SaveUpdate(Nullable<bool> booledit, Nullable<int> id, string releasedid, Nullable<int> registryofdeedsid, Nullable<int> encodedById, Nullable<bool> isprocess, Nullable<int> approvalstatus, Nullable<int> batchstatus, string xmldatallist)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var releasedidParameter = releasedid != null ?
                new ObjectParameter("releasedid", releasedid) :
                new ObjectParameter("releasedid", typeof(string));
    
            var registryofdeedsidParameter = registryofdeedsid.HasValue ?
                new ObjectParameter("registryofdeedsid", registryofdeedsid) :
                new ObjectParameter("registryofdeedsid", typeof(int));
    
            var encodedByIdParameter = encodedById.HasValue ?
                new ObjectParameter("EncodedById", encodedById) :
                new ObjectParameter("EncodedById", typeof(int));
    
            var isprocessParameter = isprocess.HasValue ?
                new ObjectParameter("isprocess", isprocess) :
                new ObjectParameter("isprocess", typeof(bool));
    
            var approvalstatusParameter = approvalstatus.HasValue ?
                new ObjectParameter("approvalstatus", approvalstatus) :
                new ObjectParameter("approvalstatus", typeof(int));
    
            var batchstatusParameter = batchstatus.HasValue ?
                new ObjectParameter("batchstatus", batchstatus) :
                new ObjectParameter("batchstatus", typeof(int));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REM_SB_Released_SaveUpdate", booleditParameter, idParameter, releasedidParameter, registryofdeedsidParameter, encodedByIdParameter, isprocessParameter, approvalstatusParameter, batchstatusParameter, xmldatallistParameter);
        }
    
        public virtual ObjectResult<REM_SB_Report_Result> REM_SB_Report(string reportdescription, Nullable<int> id)
        {
            var reportdescriptionParameter = reportdescription != null ?
                new ObjectParameter("reportdescription", reportdescription) :
                new ObjectParameter("reportdescription", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REM_SB_Report_Result>("REM_SB_Report", reportdescriptionParameter, idParameter);
        }
    
        public virtual ObjectResult<REM_SB_Return_Load_Result> REM_SB_Return_Load(Nullable<int> id, string bankid, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<int> status, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var bankidParameter = bankid != null ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(string));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REM_SB_Return_Load_Result>("REM_SB_Return_Load", idParameter, bankidParameter, datefromParameter, datetoParameter, statusParameter, keywordParameter, rownoParameter);
        }
    
        public virtual ObjectResult<REM_SB_Return_LoadReport_Result> REM_SB_Return_LoadReport(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REM_SB_Return_LoadReport_Result>("REM_SB_Return_LoadReport", idParameter);
        }
    
        public virtual int REM_SB_Return_SaveUpdate(Nullable<bool> booledit, Nullable<int> id, string returnbatch, Nullable<int> bankid, string recievedbyname, Nullable<int> encodedById, Nullable<bool> isprocess, Nullable<int> approvalstatus, string xmldatallist)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var returnbatchParameter = returnbatch != null ?
                new ObjectParameter("returnbatch", returnbatch) :
                new ObjectParameter("returnbatch", typeof(string));
    
            var bankidParameter = bankid.HasValue ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(int));
    
            var recievedbynameParameter = recievedbyname != null ?
                new ObjectParameter("recievedbyname", recievedbyname) :
                new ObjectParameter("recievedbyname", typeof(string));
    
            var encodedByIdParameter = encodedById.HasValue ?
                new ObjectParameter("EncodedById", encodedById) :
                new ObjectParameter("EncodedById", typeof(int));
    
            var isprocessParameter = isprocess.HasValue ?
                new ObjectParameter("isprocess", isprocess) :
                new ObjectParameter("isprocess", typeof(bool));
    
            var approvalstatusParameter = approvalstatus.HasValue ?
                new ObjectParameter("approvalstatus", approvalstatus) :
                new ObjectParameter("approvalstatus", typeof(int));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REM_SB_Return_SaveUpdate", booleditParameter, idParameter, returnbatchParameter, bankidParameter, recievedbynameParameter, encodedByIdParameter, isprocessParameter, approvalstatusParameter, xmldatallistParameter);
        }
    
        public virtual ObjectResult<REM_SB_Selection_Transmittal_Load_Result> REM_SB_Selection_Transmittal_Load(Nullable<int> bankid)
        {
            var bankidParameter = bankid.HasValue ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REM_SB_Selection_Transmittal_Load_Result>("REM_SB_Selection_Transmittal_Load", bankidParameter);
        }
    
        public virtual ObjectResult<REM_SB_Transmittal_Load_Result> REM_SB_Transmittal_Load(Nullable<int> id, string bankid, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<int> status, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var bankidParameter = bankid != null ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(string));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REM_SB_Transmittal_Load_Result>("REM_SB_Transmittal_Load", idParameter, bankidParameter, datefromParameter, datetoParameter, statusParameter, keywordParameter, rownoParameter);
        }
    
        public virtual int REM_SB_Transmittal_SaveUpdate(Nullable<bool> booledit, Nullable<int> id, string transmittalbatch, Nullable<int> bankid, string recievedbyname, Nullable<int> encodedById, Nullable<bool> isprocess, Nullable<int> approvalstatus, Nullable<int> batchstatus, string xmldatallist)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var transmittalbatchParameter = transmittalbatch != null ?
                new ObjectParameter("transmittalbatch", transmittalbatch) :
                new ObjectParameter("transmittalbatch", typeof(string));
    
            var bankidParameter = bankid.HasValue ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(int));
    
            var recievedbynameParameter = recievedbyname != null ?
                new ObjectParameter("recievedbyname", recievedbyname) :
                new ObjectParameter("recievedbyname", typeof(string));
    
            var encodedByIdParameter = encodedById.HasValue ?
                new ObjectParameter("EncodedById", encodedById) :
                new ObjectParameter("EncodedById", typeof(int));
    
            var isprocessParameter = isprocess.HasValue ?
                new ObjectParameter("isprocess", isprocess) :
                new ObjectParameter("isprocess", typeof(bool));
    
            var approvalstatusParameter = approvalstatus.HasValue ?
                new ObjectParameter("approvalstatus", approvalstatus) :
                new ObjectParameter("approvalstatus", typeof(int));
    
            var batchstatusParameter = batchstatus.HasValue ?
                new ObjectParameter("batchstatus", batchstatus) :
                new ObjectParameter("batchstatus", typeof(int));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REM_SB_Transmittal_SaveUpdate", booleditParameter, idParameter, transmittalbatchParameter, bankidParameter, recievedbynameParameter, encodedByIdParameter, isprocessParameter, approvalstatusParameter, batchstatusParameter, xmldatallistParameter);
        }
    
        public virtual int REM_SB_UpdateAccount(Nullable<int> id, string accountName, string tctno, string rDORNo, Nullable<System.DateTime> dateOfEntry, string epebNo, Nullable<decimal> loadAmount, Nullable<decimal> requestedRDFee, Nullable<decimal> rDFee, Nullable<decimal> serviceFee, Nullable<decimal> gratuityFee, Nullable<int> registyOfDeedsId, Nullable<decimal> ctcrdfee, Nullable<decimal> ctcgratuityfee, Nullable<System.DateTime> ctcdateofentry, string ctcrdorno, Nullable<int> statudid, Nullable<int> ctcstatusid)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var tctnoParameter = tctno != null ?
                new ObjectParameter("tctno", tctno) :
                new ObjectParameter("tctno", typeof(string));
    
            var rDORNoParameter = rDORNo != null ?
                new ObjectParameter("RDORNo", rDORNo) :
                new ObjectParameter("RDORNo", typeof(string));
    
            var dateOfEntryParameter = dateOfEntry.HasValue ?
                new ObjectParameter("DateOfEntry", dateOfEntry) :
                new ObjectParameter("DateOfEntry", typeof(System.DateTime));
    
            var epebNoParameter = epebNo != null ?
                new ObjectParameter("EpebNo", epebNo) :
                new ObjectParameter("EpebNo", typeof(string));
    
            var loadAmountParameter = loadAmount.HasValue ?
                new ObjectParameter("LoadAmount", loadAmount) :
                new ObjectParameter("LoadAmount", typeof(decimal));
    
            var requestedRDFeeParameter = requestedRDFee.HasValue ?
                new ObjectParameter("RequestedRDFee", requestedRDFee) :
                new ObjectParameter("RequestedRDFee", typeof(decimal));
    
            var rDFeeParameter = rDFee.HasValue ?
                new ObjectParameter("RDFee", rDFee) :
                new ObjectParameter("RDFee", typeof(decimal));
    
            var serviceFeeParameter = serviceFee.HasValue ?
                new ObjectParameter("ServiceFee", serviceFee) :
                new ObjectParameter("ServiceFee", typeof(decimal));
    
            var gratuityFeeParameter = gratuityFee.HasValue ?
                new ObjectParameter("GratuityFee", gratuityFee) :
                new ObjectParameter("GratuityFee", typeof(decimal));
    
            var registyOfDeedsIdParameter = registyOfDeedsId.HasValue ?
                new ObjectParameter("RegistyOfDeedsId", registyOfDeedsId) :
                new ObjectParameter("RegistyOfDeedsId", typeof(int));
    
            var ctcrdfeeParameter = ctcrdfee.HasValue ?
                new ObjectParameter("ctcrdfee", ctcrdfee) :
                new ObjectParameter("ctcrdfee", typeof(decimal));
    
            var ctcgratuityfeeParameter = ctcgratuityfee.HasValue ?
                new ObjectParameter("ctcgratuityfee", ctcgratuityfee) :
                new ObjectParameter("ctcgratuityfee", typeof(decimal));
    
            var ctcdateofentryParameter = ctcdateofentry.HasValue ?
                new ObjectParameter("ctcdateofentry", ctcdateofentry) :
                new ObjectParameter("ctcdateofentry", typeof(System.DateTime));
    
            var ctcrdornoParameter = ctcrdorno != null ?
                new ObjectParameter("ctcrdorno", ctcrdorno) :
                new ObjectParameter("ctcrdorno", typeof(string));
    
            var statudidParameter = statudid.HasValue ?
                new ObjectParameter("statudid", statudid) :
                new ObjectParameter("statudid", typeof(int));
    
            var ctcstatusidParameter = ctcstatusid.HasValue ?
                new ObjectParameter("ctcstatusid", ctcstatusid) :
                new ObjectParameter("ctcstatusid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REM_SB_UpdateAccount", idParameter, accountNameParameter, tctnoParameter, rDORNoParameter, dateOfEntryParameter, epebNoParameter, loadAmountParameter, requestedRDFeeParameter, rDFeeParameter, serviceFeeParameter, gratuityFeeParameter, registyOfDeedsIdParameter, ctcrdfeeParameter, ctcgratuityfeeParameter, ctcdateofentryParameter, ctcrdornoParameter, statudidParameter, ctcstatusidParameter);
        }
    
        public virtual int REM_SB_UpdateAccountStatus(string processid, Nullable<int> id, Nullable<int> approvalstatus, Nullable<int> accountbatchid, string xmldatallist)
        {
            var processidParameter = processid != null ?
                new ObjectParameter("processid", processid) :
                new ObjectParameter("processid", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var approvalstatusParameter = approvalstatus.HasValue ?
                new ObjectParameter("approvalstatus", approvalstatus) :
                new ObjectParameter("approvalstatus", typeof(int));
    
            var accountbatchidParameter = accountbatchid.HasValue ?
                new ObjectParameter("accountbatchid", accountbatchid) :
                new ObjectParameter("accountbatchid", typeof(int));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REM_SB_UpdateAccountStatus", processidParameter, idParameter, approvalstatusParameter, accountbatchidParameter, xmldatallistParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> REM_SB_ValidateAccount(Nullable<int> accountid)
        {
            var accountidParameter = accountid.HasValue ?
                new ObjectParameter("accountid", accountid) :
                new ObjectParameter("accountid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("REM_SB_ValidateAccount", accountidParameter);
        }
    
        public virtual ObjectResult<REMListOfDocuments_Load_Result> REMListOfDocuments_Load(Nullable<int> id, string desc, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<bool> isactive, string keyword, Nullable<int> rowno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(bool));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var rownoParameter = rowno.HasValue ?
                new ObjectParameter("rowno", rowno) :
                new ObjectParameter("rowno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REMListOfDocuments_Load_Result>("REMListOfDocuments_Load", idParameter, descParameter, datefromParameter, datetoParameter, isactiveParameter, keywordParameter, rownoParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> REMListOfDocuments_SaveUpdate(Nullable<bool> booledit, Nullable<int> id, string description, Nullable<bool> isactive, Nullable<int> encodedbyid)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(bool));
    
            var encodedbyidParameter = encodedbyid.HasValue ?
                new ObjectParameter("encodedbyid", encodedbyid) :
                new ObjectParameter("encodedbyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("REMListOfDocuments_SaveUpdate", booleditParameter, idParameter, descriptionParameter, isactiveParameter, encodedbyidParameter);
        }
    
        public virtual int SaveUpdate_Bank(Nullable<bool> booledit, Nullable<int> id, string description, Nullable<bool> isactive, Nullable<int> encodedby)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(bool));
    
            var encodedbyParameter = encodedby.HasValue ?
                new ObjectParameter("encodedby", encodedby) :
                new ObjectParameter("encodedby", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveUpdate_Bank", booleditParameter, idParameter, descriptionParameter, isactiveParameter, encodedbyParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SaveUpdate_Employee(Nullable<bool> booledit, Nullable<int> id, string employeeID, string firstName, string middleName, string lastName, string homeAddress, string presentAddress, string contactNumber, string emailAddress, string inCaseEmergency, string inCasePhoneNo, string inCaseRelationship, Nullable<bool> isActive, Nullable<int> encodedByID, Nullable<int> userAccessId)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var homeAddressParameter = homeAddress != null ?
                new ObjectParameter("HomeAddress", homeAddress) :
                new ObjectParameter("HomeAddress", typeof(string));
    
            var presentAddressParameter = presentAddress != null ?
                new ObjectParameter("PresentAddress", presentAddress) :
                new ObjectParameter("PresentAddress", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var inCaseEmergencyParameter = inCaseEmergency != null ?
                new ObjectParameter("InCaseEmergency", inCaseEmergency) :
                new ObjectParameter("InCaseEmergency", typeof(string));
    
            var inCasePhoneNoParameter = inCasePhoneNo != null ?
                new ObjectParameter("InCasePhoneNo", inCasePhoneNo) :
                new ObjectParameter("InCasePhoneNo", typeof(string));
    
            var inCaseRelationshipParameter = inCaseRelationship != null ?
                new ObjectParameter("InCaseRelationship", inCaseRelationship) :
                new ObjectParameter("InCaseRelationship", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var encodedByIDParameter = encodedByID.HasValue ?
                new ObjectParameter("EncodedByID", encodedByID) :
                new ObjectParameter("EncodedByID", typeof(int));
    
            var userAccessIdParameter = userAccessId.HasValue ?
                new ObjectParameter("UserAccessId", userAccessId) :
                new ObjectParameter("UserAccessId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SaveUpdate_Employee", booleditParameter, idParameter, employeeIDParameter, firstNameParameter, middleNameParameter, lastNameParameter, homeAddressParameter, presentAddressParameter, contactNumberParameter, emailAddressParameter, inCaseEmergencyParameter, inCasePhoneNoParameter, inCaseRelationshipParameter, isActiveParameter, encodedByIDParameter, userAccessIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SaveUpdate_Lad(Nullable<bool> booledit, Nullable<int> id, string description, Nullable<int> bankid, string reportcode, string presentaddress, Nullable<bool> ispriority, Nullable<bool> isactive, Nullable<int> encodedby)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var bankidParameter = bankid.HasValue ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(int));
    
            var reportcodeParameter = reportcode != null ?
                new ObjectParameter("reportcode", reportcode) :
                new ObjectParameter("reportcode", typeof(string));
    
            var presentaddressParameter = presentaddress != null ?
                new ObjectParameter("presentaddress", presentaddress) :
                new ObjectParameter("presentaddress", typeof(string));
    
            var ispriorityParameter = ispriority.HasValue ?
                new ObjectParameter("ispriority", ispriority) :
                new ObjectParameter("ispriority", typeof(bool));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(bool));
    
            var encodedbyParameter = encodedby.HasValue ?
                new ObjectParameter("encodedby", encodedby) :
                new ObjectParameter("encodedby", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SaveUpdate_Lad", booleditParameter, idParameter, descriptionParameter, bankidParameter, reportcodeParameter, presentaddressParameter, ispriorityParameter, isactiveParameter, encodedbyParameter);
        }
    
        public virtual int SaveUpdate_ModuleGroup(Nullable<int> moduleid, Nullable<int> itemid, string tablename)
        {
            var moduleidParameter = moduleid.HasValue ?
                new ObjectParameter("moduleid", moduleid) :
                new ObjectParameter("moduleid", typeof(int));
    
            var itemidParameter = itemid.HasValue ?
                new ObjectParameter("itemid", itemid) :
                new ObjectParameter("itemid", typeof(int));
    
            var tablenameParameter = tablename != null ?
                new ObjectParameter("tablename", tablename) :
                new ObjectParameter("tablename", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveUpdate_ModuleGroup", moduleidParameter, itemidParameter, tablenameParameter);
        }
    
        public virtual int SaveUpdate_UserAccess(Nullable<int> employeeid, string username, string password, Nullable<bool> isActive)
        {
            var employeeidParameter = employeeid.HasValue ?
                new ObjectParameter("employeeid", employeeid) :
                new ObjectParameter("employeeid", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveUpdate_UserAccess", employeeidParameter, usernameParameter, passwordParameter, isActiveParameter);
        }
    
        public virtual int SaveUpdate_UserAccessGroup(Nullable<bool> booledit, Nullable<int> id, string description, string useraccess, string showincombobox, Nullable<bool> isactive, Nullable<int> encodedby, Nullable<bool> canedit)
        {
            var booleditParameter = booledit.HasValue ?
                new ObjectParameter("booledit", booledit) :
                new ObjectParameter("booledit", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var useraccessParameter = useraccess != null ?
                new ObjectParameter("useraccess", useraccess) :
                new ObjectParameter("useraccess", typeof(string));
    
            var showincomboboxParameter = showincombobox != null ?
                new ObjectParameter("showincombobox", showincombobox) :
                new ObjectParameter("showincombobox", typeof(string));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(bool));
    
            var encodedbyParameter = encodedby.HasValue ?
                new ObjectParameter("encodedby", encodedby) :
                new ObjectParameter("encodedby", typeof(int));
    
            var caneditParameter = canedit.HasValue ?
                new ObjectParameter("canedit", canedit) :
                new ObjectParameter("canedit", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveUpdate_UserAccessGroup", booleditParameter, idParameter, descriptionParameter, useraccessParameter, showincomboboxParameter, isactiveParameter, encodedbyParameter, caneditParameter);
        }
    
        public virtual int SB_Comments_SaveUpdate(Nullable<int> id, string transactioncode, string xmldatallist)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var transactioncodeParameter = transactioncode != null ?
                new ObjectParameter("transactioncode", transactioncode) :
                new ObjectParameter("transactioncode", typeof(string));
    
            var xmldatallistParameter = xmldatallist != null ?
                new ObjectParameter("xmldatallist", xmldatallist) :
                new ObjectParameter("xmldatallist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SB_Comments_SaveUpdate", idParameter, transactioncodeParameter, xmldatallistParameter);
        }
    
        public virtual ObjectResult<SB_Released_Report_Result> SB_Released_Report(string reportdescription, Nullable<int> id, Nullable<int> bankid)
        {
            var reportdescriptionParameter = reportdescription != null ?
                new ObjectParameter("reportdescription", reportdescription) :
                new ObjectParameter("reportdescription", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var bankidParameter = bankid.HasValue ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SB_Released_Report_Result>("SB_Released_Report", reportdescriptionParameter, idParameter, bankidParameter);
        }
    
        public virtual ObjectResult<Validate_Bank_Result> Validate_Bank(Nullable<bool> @bool, Nullable<int> id, string desc)
        {
            var boolParameter = @bool.HasValue ?
                new ObjectParameter("bool", @bool) :
                new ObjectParameter("bool", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Validate_Bank_Result>("Validate_Bank", boolParameter, idParameter, descParameter);
        }
    
        public virtual ObjectResult<Validate_Batch_Result> Validate_Batch(Nullable<bool> @bool, Nullable<int> id, string batchid)
        {
            var boolParameter = @bool.HasValue ?
                new ObjectParameter("bool", @bool) :
                new ObjectParameter("bool", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var batchidParameter = batchid != null ?
                new ObjectParameter("batchid", batchid) :
                new ObjectParameter("batchid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Validate_Batch_Result>("Validate_Batch", boolParameter, idParameter, batchidParameter);
        }
    
        public virtual ObjectResult<Validate_Lad_Result> Validate_Lad(Nullable<bool> @bool, Nullable<int> id, string desc)
        {
            var boolParameter = @bool.HasValue ?
                new ObjectParameter("bool", @bool) :
                new ObjectParameter("bool", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Validate_Lad_Result>("Validate_Lad", boolParameter, idParameter, descParameter);
        }
    
        public virtual ObjectResult<Validate_LTO_Result> Validate_LTO(Nullable<bool> @bool, string type, Nullable<int> id, string desc)
        {
            var boolParameter = @bool.HasValue ?
                new ObjectParameter("bool", @bool) :
                new ObjectParameter("bool", typeof(bool));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Validate_LTO_Result>("Validate_LTO", boolParameter, typeParameter, idParameter, descParameter);
        }
    
        public virtual ObjectResult<Validate_UserAccessGroup_Result> Validate_UserAccessGroup(Nullable<bool> @bool, Nullable<int> id, string desc)
        {
            var boolParameter = @bool.HasValue ?
                new ObjectParameter("bool", @bool) :
                new ObjectParameter("bool", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Validate_UserAccessGroup_Result>("Validate_UserAccessGroup", boolParameter, idParameter, descParameter);
        }
    
        public virtual ObjectResult<Validate_Username_Result> Validate_Username(Nullable<bool> @bool, Nullable<int> id, string desc, string checkeditem)
        {
            var boolParameter = @bool.HasValue ?
                new ObjectParameter("bool", @bool) :
                new ObjectParameter("bool", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            var checkeditemParameter = checkeditem != null ?
                new ObjectParameter("checkeditem", checkeditem) :
                new ObjectParameter("checkeditem", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Validate_Username_Result>("Validate_Username", boolParameter, idParameter, descParameter, checkeditemParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Validation_IsUsedItem(string tablename, Nullable<int> id)
        {
            var tablenameParameter = tablename != null ?
                new ObjectParameter("tablename", tablename) :
                new ObjectParameter("tablename", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Validation_IsUsedItem", tablenameParameter, idParameter);
        }
    }
}
